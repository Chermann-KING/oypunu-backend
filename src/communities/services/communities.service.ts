/**
 * @fileoverview Service principal de gestion des communaut√©s O'Ypunu
 * 
 * Ce service centralise toute la logique m√©tier li√©e aux communaut√©s,
 * incluant cr√©ation, gestion des membres, recherche, et mod√©ration.
 * Il fournit une API compl√®te pour les interactions communautaires
 * avec validation des permissions et gestion d'erreurs robuste.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import { Injectable, NotFoundException, Inject } from "@nestjs/common";
import { CommunityFiltersDto } from "../dto/community-filters.dto";
import { CreateCommunityDto } from "../dto/create-community.dto";
import { CommunityMember } from "../schemas/community-member.schema";
import { Community } from "../schemas/community.schema";
import { ICommunityRepository } from "../../repositories/interfaces/community.repository.interface";
import { ICommunityMemberRepository } from "../../repositories/interfaces/community-member.repository.interface";

/**
 * Interface pour les requ√™tes de recherche de communaut√©s MongoDB
 * 
 * @interface CommunityQuery
 * @property {Array} [$or] - Conditions OR pour recherche textuelle
 * @property {string} [language] - Filtre par langue de la communaut√©
 * @property {string} [tags] - Filtre par tag sp√©cifique
 * @property {boolean} [isPrivate] - Filtre par visibilit√© publique/priv√©e
 */
interface CommunityQuery {
  $or?: Array<{ [key: string]: { $regex: string; $options: string } }>;
  language?: string;
  tags?: string;
  isPrivate?: boolean;
}

/**
 * Interface pour les donn√©es utilisateur JWT
 * 
 * @interface JwtUser
 * @property {string} [userId] - ID utilisateur alternatif
 * @property {string} [_id] - ID utilisateur MongoDB
 * @property {string} username - Nom d'utilisateur
 * @property {string} email - Email utilisateur
 * @property {string} role - R√¥le utilisateur (USER, CONTRIBUTOR, ADMIN, etc.)
 */
interface JwtUser {
  userId?: string;
  _id?: string;
  username: string;
  email: string;
  role: string;
}

/**
 * Service principal de gestion des communaut√©s O'Ypunu
 * 
 * Ce service centralise toute la logique m√©tier des communaut√©s avec
 * une architecture robuste bas√©e sur le pattern Repository et une
 * gestion compl√®te des permissions et validations.
 * 
 * ## Fonctionnalit√©s principales :
 * 
 * ### üèóÔ∏è Gestion de communaut√©s
 * - Cr√©ation avec assignation automatique d'admin
 * - Mise √† jour avec contr√¥le de permissions
 * - Suppression en cascade (membres + posts)
 * - Recherche multicrit√®res optimis√©e
 * 
 * ### üë• Gestion des membres
 * - Adh√©sion et d√©sadh√©sion s√©curis√©es
 * - Syst√®me de r√¥les hi√©rarchiques (member < moderator < admin)
 * - Compteurs de membres automatiques
 * - Validation des permissions pour actions sensibles
 * 
 * ### üîç Recherche et d√©couverte
 * - Recherche textuelle avec regex insensible √† la casse
 * - Filtrage par langue, tags et visibilit√©
 * - Pagination optimis√©e pour grandes collections
 * - Tri personnalisable (date, nom, nombre de membres)
 * 
 * ### üõ°Ô∏è S√©curit√© et permissions
 * - Extraction s√©curis√©e des IDs utilisateur
 * - Validation des r√¥les pour toutes les actions
 * - Protection contre les actions non autoris√©es
 * - Logging d√©taill√© pour audit et debugging
 * 
 * @class CommunitiesService
 * @version 1.0.0
 */
@Injectable()
export class CommunitiesService {
  /**
   * Constructeur du service avec injection des repositories
   * 
   * @constructor
   * @param {ICommunityRepository} communityRepository - Repository des communaut√©s
   * @param {ICommunityMemberRepository} communityMemberRepository - Repository des membres
   */
  constructor(
    @Inject("ICommunityRepository")
    private communityRepository: ICommunityRepository,
    @Inject("ICommunityMemberRepository")
    private communityMemberRepository: ICommunityMemberRepository
  ) {}

  /**
   * Extrait l'ID utilisateur d'un objet JwtUser ou d'une cha√Æne
   * 
   * M√©thode utilitaire qui normalise l'extraction de l'ID utilisateur
   * √† partir de diff√©rents formats d'entr√©e (string directe ou objet JWT).
   * G√®re les variations de noms de champs (_id vs userId).
   * 
   * @private
   * @method _extractUserId
   * @param {JwtUser | string} userOrId - Utilisateur JWT ou ID direct
   * @returns {string} ID utilisateur extrait
   * @throws {Error} Si aucun ID valide n'est trouv√©
   * 
   * @example
   * ```typescript
   * const userId1 = this._extractUserId("507f1f77bcf86cd799439011");
   * const userId2 = this._extractUserId({ userId: "507f...", username: "john" });
   * const userId3 = this._extractUserId({ _id: "507f...", email: "john@example.com" });
   * ```
   */
  private _extractUserId(userOrId: JwtUser | string): string {
    if (typeof userOrId === "string") {
      return userOrId;
    }

    const userId = userOrId.userId || userOrId._id;
    if (!userId) {
      throw new Error("User ID is required");
    }

    return userId;
  }

  /**
   * Cr√©e une nouvelle communaut√© avec assignation automatique d'admin
   * 
   * Cette m√©thode centrale cr√©e une communaut√© et configure automatiquement
   * le cr√©ateur comme administrateur. Elle effectue les op√©rations en
   * deux √©tapes atomiques : cr√©ation de la communaut√© puis ajout du membre admin.
   * 
   * @async
   * @method create
   * @param {CreateCommunityDto} createCommunityDto - Donn√©es de cr√©ation
   * @param {JwtUser | string} user - Utilisateur cr√©ateur
   * @returns {Promise<Community>} Communaut√© cr√©√©e avec m√©tadonn√©es
   * @throws {Error} Si la cr√©ation √©choue ou l'utilisateur est invalide
   * 
   * @example
   * ```typescript
   * const newCommunity = await this.communitiesService.create({
   *   name: 'D√©veloppeurs Yipunu',
   *   description: 'Communaut√© des d√©veloppeurs de langues africaines',
   *   language: 'fr',
   *   tags: ['d√©veloppement', 'yipunu'],
   *   isPrivate: false
   * }, currentUser);
   * ```
   */
  async create(
    createCommunityDto: CreateCommunityDto,
    user: JwtUser | string
  ): Promise<Community> {
    console.log("Creating community with user:", user);

    const userId = this._extractUserId(user);
    console.log("Resolved User ID:", userId);

    const community = await this.communityRepository.create({
      name: createCommunityDto.name,
      description: createCommunityDto.description,
      language: createCommunityDto.language,
      tags: createCommunityDto.tags,
      isPrivate: createCommunityDto.isPrivate,
      coverImage: createCommunityDto.coverImage,
      createdBy: userId,
    });

    // Ajouter le cr√©ateur comme admin
    await this.communityMemberRepository.create({
      communityId: (community as any)._id,
      userId: userId,
      role: "admin",
    });

    return community;
  }

  /**
   * R√©cup√®re toutes les communaut√©s avec filtrage avanc√© et pagination
   * 
   * Cette m√©thode complexe g√®re la recherche multicrit√®res de communaut√©s
   * avec optimisations sp√©cifiques selon le type de recherche :
   * - Recherche textuelle : regex sur nom et description
   * - Filtrage par langue : utilise l'index langue
   * - Filtrage par tags : recherche dans tableau de tags
   * - Tri personnalisable et pagination optimis√©e
   * 
   * @async
   * @method findAll
   * @param {CommunityFiltersDto} filters - Crit√®res de recherche et pagination
   * @returns {Promise<Object>} R√©sultat pagin√© avec communaut√©s et m√©tadonn√©es
   * @property {Community[]} communities - Liste des communaut√©s trouv√©es
   * @property {number} total - Nombre total de r√©sultats
   * @property {number} page - Page actuelle
   * @property {number} limit - Limite par page
   * 
   * @example
   * ```typescript
   * const result = await this.communitiesService.findAll({
   *   page: 1,
   *   limit: 20,
   *   searchTerm: 'd√©veloppement',
   *   language: 'fr',
   *   includePrivate: false,
   *   sortBy: 'memberCount',
   *   sortOrder: 'desc'
   * });
   * ```
   */
  async findAll(filters: CommunityFiltersDto): Promise<{
    communities: Community[];
    total: number;
    page: number;
    limit: number;
  }> {
    const {
      page = 1,
      limit = 10,
      searchTerm,
      language,
      tag,
      includePrivate,
      sortBy = "createdAt",
      sortOrder = "desc",
    } = filters;
    const skip = (page - 1) * limit;

    const query: CommunityQuery = {};

    if (searchTerm) {
      query.$or = [
        { name: { $regex: searchTerm, $options: "i" } },
        { description: { $regex: searchTerm, $options: "i" } },
      ];
    }

    if (language) {
      query.language = language;
    }

    if (tag) {
      query.tags = tag;
    }

    if (!includePrivate) {
      query.isPrivate = false;
    }

    const sort = {};
    sort[sortBy] = sortOrder === "desc" ? -1 : 1;

    // Convertir les filtres pour le repository
    const repositoryOptions = {
      page,
      limit,
      includePrivate,
      sortBy: sortBy as "memberCount" | "createdAt" | "name",
      sortOrder: sortOrder as "asc" | "desc",
    };

    let result;
    if (searchTerm) {
      result = await this.communityRepository.search(searchTerm, {
        language,
        includePrivate,
        limit,
        skip,
      });
      return {
        communities: result.communities,
        total: result.total,
        page,
        limit,
      };
    } else if (language) {
      result = await this.communityRepository.findByLanguage(
        language,
        repositoryOptions
      );
      return result;
    } else if (tag) {
      const communities = await this.communityRepository.findByTags([tag], {
        includePrivate,
        limit,
      });
      const total = communities.length;
      return { communities, total, page, limit };
    } else {
      result = await this.communityRepository.findAll(repositoryOptions);
      return {
        communities: result.communities,
        total: result.total,
        page: result.page,
        limit: result.limit,
      };
    }
  }

  /**
   * Permet √† un utilisateur de rejoindre une communaut√©
   * 
   * Cette m√©thode g√®re l'adh√©sion d'un utilisateur √† une communaut√© avec
   * v√©rification anti-duplication et mise √† jour automatique des compteurs.
   * Elle est idempotente : si l'utilisateur est d√©j√† membre, elle retourne
   * success=true sans erreur.
   * 
   * @async
   * @method joinCommunity
   * @param {string} communityId - ID de la communaut√© √† rejoindre
   * @param {JwtUser | string} userOrId - Utilisateur demandant l'adh√©sion
   * @returns {Promise<Object>} R√©sultat de l'op√©ration
   * @property {boolean} success - Succ√®s de l'adh√©sion
   * 
   * @example
   * ```typescript
   * const result = await this.communitiesService.joinCommunity(
   *   '507f1f77bcf86cd799439011',
   *   currentUser
   * );
   * if (result.success) {
   *   console.log('Utilisateur ajout√© √† la communaut√©');
   * }
   * ```
   */
  async joinCommunity(
    communityId: string,
    userOrId: JwtUser | string
  ): Promise<{ success: boolean }> {
    const userId = this._extractUserId(userOrId);

    // V√©rifier si l'utilisateur est d√©j√† membre
    const isMember = await this.communityMemberRepository.isMember(
      communityId,
      userId
    );

    if (isMember) {
      return { success: true }; // D√©j√† membre
    }

    // Ajouter comme membre
    await this.communityMemberRepository.create({
      communityId,
      userId,
      role: "member",
    });

    // Incr√©menter le compteur de membres
    await this.communityRepository.incrementMemberCount(communityId);

    return { success: true };
  }

  // Quitter une communaut√©
  async leaveCommunity(
    communityId: string,
    userOrId: JwtUser | string
  ): Promise<{ success: boolean }> {
    const userId = this._extractUserId(userOrId);

    const isMember = await this.communityMemberRepository.isMember(
      communityId,
      userId
    );

    if (!isMember) {
      return { success: false };
    }

    const removed = await this.communityMemberRepository.removeMember(
      communityId,
      userId
    );
    if (removed) {
      await this.communityRepository.decrementMemberCount(communityId);
    }

    return { success: true };
  }

  // R√©cup√©rer les membres d'une communaut√©
  async getCommunityMembers(
    communityId: string,
    page = 1,
    limit = 10
  ): Promise<{
    members: CommunityMember[];
    total: number;
    page: number;
    limit: number;
  }> {
    const result = await this.communityMemberRepository.findByCommunity(
      communityId,
      {
        page,
        limit,
        sortBy: "joinedAt",
        sortOrder: "desc",
      }
    );

    const { members, total } = result;

    return { members, total, page, limit };
  }

  async getAllMembersWithRoles(communityId: string): Promise<any[]> {
    const result = await this.communityMemberRepository.findByCommunity(
      communityId,
      {
        limit: 1000, // Limite √©lev√©e pour r√©cup√©rer tous les membres
      }
    );
    return result.members;
  }

  /**
   * Met √† jour le r√¥le d'un membre dans une communaut√©
   * 
   * Cette m√©thode critique g√®re la promotion/r√©trogradation des membres
   * avec validation stricte des permissions. Seuls les administrateurs
   * peuvent modifier les r√¥les des autres membres. Elle inclut des
   * v√©rifications de s√©curit√© pour √©viter les escalades de privil√®ges.
   * 
   * @async
   * @method updateMemberRole
   * @param {string} communityId - ID de la communaut√©
   * @param {string} memberUserId - ID du membre √† modifier
   * @param {"admin" | "moderator" | "member"} newRole - Nouveau r√¥le √† assigner
   * @param {JwtUser | string} adminUserOrId - Administrateur effectuant la modification
   * @returns {Promise<Object>} R√©sultat de l'op√©ration
   * @property {boolean} success - Succ√®s de la modification
   * @property {string} message - Message explicatif du r√©sultat
   * 
   * @example
   * ```typescript
   * const result = await this.communitiesService.updateMemberRole(
   *   communityId,
   *   memberUserId,
   *   'moderator',
   *   adminUser
   * );
   * if (result.success) {
   *   console.log('R√¥le mis √† jour:', result.message);
   * }
   * ```
   */
  async updateMemberRole(
    communityId: string,
    memberUserId: string,
    newRole: "admin" | "moderator" | "member",
    adminUserOrId: JwtUser | string
  ): Promise<{ success: boolean; message: string }> {
    const adminId = this._extractUserId(adminUserOrId);

    // V√©rifier si l'administrateur a les droits
    const isAdmin = await this.communityMemberRepository.hasRole(
      communityId,
      adminId,
      "admin"
    );

    if (!isAdmin) {
      return {
        success: false,
        message: "Vous n'avez pas les droits n√©cessaires",
      };
    }

    // V√©rifier si le membre existe
    const isMember = await this.communityMemberRepository.isMember(
      communityId,
      memberUserId
    );

    if (!isMember) {
      return { success: false, message: "Membre non trouv√©" };
    }

    // Mettre √† jour le r√¥le
    await this.communityMemberRepository.updateRole(
      communityId,
      memberUserId,
      newRole
    );

    return { success: true, message: "R√¥le mis √† jour avec succ√®s" };
  }

  // R√©cup√©rer les communaut√©s d'un utilisateur
  async getUserCommunities(
    userOrId: JwtUser | string,
    page = 1,
    limit = 10
  ): Promise<{
    communities: Community[];
    total: number;
    page: number;
    limit: number;
  }> {
    const userId = this._extractUserId(userOrId);

    const membershipResult = await this.communityMemberRepository.findByUser(
      userId,
      {
        page,
        limit,
        sortBy: "joinedAt",
        sortOrder: "desc",
      }
    );

    const communityIds = membershipResult.memberships.map(
      (member) => (member as any).communityId
    );

    // R√©cup√©rer les communaut√©s correspondantes
    const communities = [];
    for (const communityId of communityIds) {
      const community = await this.communityRepository.findById(communityId);
      if (community) {
        communities.push(community);
      }
    }

    const total = membershipResult.total;

    return { communities, total, page, limit };
  }

  /**
   * R√©cup√®re une communaut√© sp√©cifique par son ID
   * 
   * M√©thode simple de r√©cup√©ration d'une communaut√© avec gestion d'erreur
   * automatique si la communaut√© n'existe pas. Utilis√©e comme base pour
   * de nombreuses autres op√©rations n√©cessitant une validation d'existence.
   * 
   * @async
   * @method findOne
   * @param {string} communityId - ID de la communaut√© √† r√©cup√©rer
   * @returns {Promise<Community>} Communaut√© trouv√©e
   * @throws {NotFoundException} Si la communaut√© n'existe pas
   * 
   * @example
   * ```typescript
   * try {
   *   const community = await this.communitiesService.findOne(communityId);
   *   console.log('Communaut√© trouv√©e:', community.name);
   * } catch (error) {
   *   console.error('Communaut√© non trouv√©e');
   * }
   * ```
   */
  async findOne(communityId: string): Promise<Community> {
    const community = await this.communityRepository.findById(communityId);

    if (!community) {
      throw new NotFoundException(
        `Communaut√© avec l'ID ${communityId} non trouv√©e`
      );
    }

    return community;
  }

  // Mettre √† jour une communaut√©
  async update(
    communityId: string,
    updateData: Partial<Community>,
    userOrId: JwtUser | string
  ): Promise<{ success: boolean; message: string }> {
    const userId = this._extractUserId(userOrId);

    const isAdmin = await this.communityMemberRepository.hasRole(
      communityId,
      userId,
      "admin"
    );

    if (!isAdmin) {
      return {
        success: false,
        message: "Vous n'avez pas les droits n√©cessaires",
      };
    }

    await this.communityRepository.update(communityId, updateData);
    return { success: true, message: "Communaut√© mise √† jour avec succ√®s" };
  }

  // Supprimer une communaut√©
  async delete(
    communityId: string,
    userOrId: JwtUser | string
  ): Promise<{ success: boolean; message: string }> {
    const userId = this._extractUserId(userOrId);

    const isAdmin = await this.communityMemberRepository.hasRole(
      communityId,
      userId,
      "admin"
    );

    if (!isAdmin) {
      return {
        success: false,
        message: "Vous n'avez pas les droits n√©cessaires",
      };
    }

    await Promise.all([
      this.communityRepository.delete(communityId),
      this.communityMemberRepository.removeAllFromCommunity(communityId),
    ]);

    return { success: true, message: "Communaut√© supprim√©e avec succ√®s" };
  }

  // V√©rifier si un utilisateur est membre d'une communaut√©
  async isMember(
    communityId: string,
    userOrId: JwtUser | string
  ): Promise<boolean> {
    const userId = this._extractUserId(userOrId);

    return this.communityMemberRepository.isMember(communityId, userId);
  }

  // R√©cup√©rer le r√¥le d'un membre dans une communaut√©
  async getMemberRole(
    communityId: string,
    userOrId: JwtUser | string
  ): Promise<"admin" | "moderator" | "member" | null> {
    const userId = this._extractUserId(userOrId);    const role = await this.communityMemberRepository.getUserRole(
      communityId,
      userId
    );

    console.log("R√¥le trouv√©:", role);

    return role;
  }

  // Rechercher des communaut√©s par tag
  async searchByTags(
    tags: string[],
    page = 1,
    limit = 10
  ): Promise<{
    communities: Community[];
    total: number;
    page: number;
    limit: number;
  }> {
    const communities = await this.communityRepository.findByTags(tags, {
      includePrivate: false,
      limit,
    });

    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const paginatedCommunities = communities.slice(startIndex, endIndex);
    const total = communities.length;

    return { communities: paginatedCommunities, total, page, limit };
  }
}
