/**
 * @fileoverview Gestionnaire d'erreurs de base de donn√©es consolid√© pour O'Ypunu
 *
 * Ce gestionnaire unifie et centralise toute la gestion d'erreurs li√©es aux
 * op√©rations de base de donn√©es MongoDB/Mongoose. Il consolide les fonctionnalit√©s
 * pr√©c√©demment dupliqu√©es et fournit des wrappers sp√©cialis√©s pour toutes les
 * op√©rations CRUD avec monitoring des performances.
 *
 * @author √âquipe O'Ypunu
 * @version 2.0.0
 * @since 2025-01-01
 */

import { 
  BadRequestException, 
  InternalServerErrorException, 
  NotFoundException,
  ConflictException,
  Logger
} from '@nestjs/common';
import { MongoError } from 'mongodb';
import { BaseErrorHandler } from '../core/base-error.handler';
import { ApplicationErrorCode } from '../core/error-codes.enum';
import { DatabaseOperationContext, DatabaseOperation } from '../core/error.interfaces';

/**
 * Gestionnaire centralis√© et consolid√© d'erreurs de base de donn√©es
 *
 * Cette classe h√©rite de BaseErrorHandler et centralise TOUTE la logique
 * de gestion d'erreurs MongoDB/Mongoose. Elle √©limine les duplications
 * pr√©c√©dentes et fournit une API unifi√©e pour tous les types d'op√©rations
 * de base de donn√©es avec monitoring int√©gr√©.
 *
 * ## üõ°Ô∏è Fonctionnalit√©s consolid√©es :
 *
 * ### Gestion d'erreurs MongoDB unifi√©e
 * - Classification automatique des erreurs (11000, CastError, ValidationError)
 * - Messages utilisateur contextualis√©s en fran√ßais
 * - Logging structur√© avec stack traces
 * - Pr√©servation des erreurs NestJS existantes
 *
 * ### Wrappers sp√©cialis√©s avec monitoring
 * - Op√©rations CRUD (Create, Read, Update, Delete)
 * - Recherches et filtres complexes
 * - Agr√©gations et statistiques
 * - Mesure automatique des performances
 *
 * ### Audit et debugging avanc√©s
 * - Contexte enrichi (entit√©, utilisateur, op√©ration)
 * - Temps d'ex√©cution avec seuils d'alerte
 * - Logs diff√©renci√©s par niveau de s√©v√©rit√©
 * - Int√©gration monitoring externe
 *
 * @class DatabaseErrorHandler
 * @extends BaseErrorHandler
 * @version 2.0.0
 */
export class DatabaseErrorHandler extends BaseErrorHandler {
  /** Logger sp√©cialis√© pour les erreurs de base de donn√©es */
  protected readonly logger = new Logger('DatabaseErrorHandler');

  /**
   * Wrapper g√©n√©rique pour op√©rations de base de donn√©es avec gestion compl√®te
   *
   * Cette m√©thode encapsule toute op√©ration de base de donn√©es avec :
   * - Logging automatique d√©but/fin d'op√©ration
   * - Mesure pr√©cise du temps d'ex√©cution
   * - Gestion d'erreurs contextuelle unifi√©e
   * - Enrichissement des m√©tadonn√©es de debug
   * - Alertes sur performances d√©grad√©es
   *
   * @static
   * @async
   * @method handleDatabaseOperation
   * @template T Type de retour de l'op√©ration
   * @param {() => Promise<T>} operation - Op√©ration async √† ex√©cuter
   * @param {DatabaseOperationContext} context - Contexte de l'op√©ration
   * @returns {Promise<T>} R√©sultat de l'op√©ration
   * @throws {BadRequestException|NotFoundException|ConflictException|InternalServerErrorException}
   *
   * @example
   * ```typescript
   * const user = await DatabaseErrorHandler.handleDatabaseOperation(
   *   () => userModel.findById(userId),
   *   {
   *     operationName: 'FIND',
   *     entityName: 'User',
   *     entityId: userId,
   *     userId: currentUserId
   *   }
   * );
   * ```
   */
  static async handleDatabaseOperation<T>(
    operation: () => Promise<T>,
    context: DatabaseOperationContext
  ): Promise<T> {
    const handler = new DatabaseErrorHandler();
    const { operationName, entityName, entityId, userId } = context;
    
    try {
      handler.logger.debug(
        `üîç [${operationName}] D√©but op√©ration ${entityName}${entityId ? ` (ID: ${entityId})` : ''}${userId ? ` par utilisateur ${userId}` : ''}`
      );
      
      const result = await handler.measureExecutionTime(
        operation,
        `${operationName} ${entityName}`
      );
      
      return result;
    } catch (error) {
      handler.logger.error(`‚ùå [${operationName}] Erreur ${entityName}:`, {
        error: error.message,
        entityId,
        userId,
        stack: error.stack,
        operationName
      });

      throw handler.handleDatabaseError(error, context);
    }
  }

  /**
   * Gestion consolid√©e et unifi√©e des erreurs MongoDB/Mongoose
   *
   * Cette m√©thode centrale analyse le type d'erreur et retourne une exception
   * NestJS appropri√©e. Elle consolide toute la logique pr√©c√©demment dupliqu√©e
   * entre les diff√©rents gestionnaires d'erreurs.
   *
   * @private
   * @method handleDatabaseError
   * @param {any} error - Erreur originale captur√©e
   * @param {DatabaseOperationContext} context - Contexte de l'op√©ration
   * @returns {Error} Exception NestJS format√©e
   */
  private handleDatabaseError(error: any, context: DatabaseOperationContext): Error {
    const { operationName, entityName, entityId } = context;

    // Pr√©server les erreurs NestJS existantes (ne pas envelopper)
    if (this.isNestJSException(error)) {
      return error;
    }

    // === ERREURS MONGODB SP√âCIFIQUES ===
    if (error.name === 'MongoError' || error instanceof MongoError) {
      return this.handleMongoError(error, entityName);
    }

    // === ERREURS MONGOOSE DE VALIDATION ===
    if (error.name === 'ValidationError') {
      return this.handleValidationError(error, entityName);
    }

    // === ERREURS MONGOOSE DE CAST (ID INVALIDE) ===
    if (error.name === 'CastError') {
      return this.createError(
        ApplicationErrorCode.INVALID_OBJECT_ID,
        `ID ${entityName} invalide : ${entityId || 'non sp√©cifi√©'}`,
        `${operationName}.${entityName}`,
        { fieldName: error.path, value: error.value }
      );
    }

    // === ERREURS DE CONNEXION MONGODB ===
    if (error.name === 'MongoNetworkError' || error.name === 'MongoTimeoutError') {
      this.logger.error(`üî¥ [${operationName}] Probl√®me de connexion base de donn√©es`, error);
      return this.createError(
        ApplicationErrorCode.DATABASE_ERROR,
        'Service temporairement indisponible. Veuillez r√©essayer dans quelques instants.',
        `${operationName}.${entityName}.connection`,
        { errorType: error.name, originalMessage: error.message }
      );
    }

    // === ERREURS MONGODB DE TRANSACTION ===
    if (error.name === 'MongoWriteConcernError') {
      this.logger.error(`üî¥ [${operationName}] Erreur de consistance MongoDB`, error);
      return this.createError(
        ApplicationErrorCode.DATABASE_ERROR,
        'Erreur de consistance de donn√©es. Veuillez r√©essayer.',
        `${operationName}.${entityName}.writeConcern`,
        { writeConcern: error.result }
      );
    }

    // === ERREUR G√âN√âRIQUE ===
    this.logger.error(`üî¥ [${operationName}] Erreur inattendue ${entityName}:`, error);
    return this.createError(
      ApplicationErrorCode.INTERNAL_SERVER_ERROR,
      `Erreur lors de l'op√©ration sur ${entityName}. Veuillez contacter le support si le probl√®me persiste.`,
      `${operationName}.${entityName}.unexpected`,
      { originalMessage: error.message, stack: error.stack }
    );
  }

  /**
   * Gestion sp√©cialis√©e des erreurs MongoDB natives
   *
   * @private
   * @method handleMongoError
   * @param {any} error - Erreur MongoDB
   * @param {string} entityName - Nom de l'entit√©
   * @returns {Error} Exception NestJS appropri√©e
   */
  private handleMongoError(error: any, entityName: string): Error {
    // Erreur de duplication (cl√© unique viol√©e)
    if (error.code === 11000) {
      const field = this.extractDuplicateField(error);
      return this.createError(
        ApplicationErrorCode.RESOURCE_ALREADY_EXISTS,
        `${entityName} avec ${field} existe d√©j√†`,
        'MongoDB.DuplicateKey',
        { mongoError: error.code, field, keyPattern: error.keyPattern }
      );
    }

    // Erreur de taille de document (16MB limit)
    if (error.code === 2) {
      return this.createError(
        ApplicationErrorCode.VALIDATION_FAILED,
        `${entityName} trop volumineux pour √™tre enregistr√©`,
        'MongoDB.DocumentTooLarge',
        { mongoError: error.code, maxSize: '16MB' }
      );
    }

    // Erreur d'index invalide
    if (error.code === 85) {
      this.logger.error(`üî¥ Erreur d'index MongoDB pour ${entityName}:`, error);
      return this.createError(
        ApplicationErrorCode.DATABASE_ERROR,
        'Erreur de base de donn√©es. Veuillez r√©essayer.',
        'MongoDB.IndexError',
        { mongoError: error.code }
      );
    }

    // Erreur de limite de connexions
    if (error.code === 18) {
      return this.createError(
        ApplicationErrorCode.DATABASE_ERROR,
        'Service surcharg√©. Veuillez r√©essayer dans quelques instants.',
        'MongoDB.TooManyConnections',
        { mongoError: error.code }
      );
    }

    // Autres erreurs MongoDB
    return this.createError(
      ApplicationErrorCode.DATABASE_ERROR,
      `Erreur de base de donn√©es lors de l'op√©ration sur ${entityName}`,
      'MongoDB.Generic',
      { mongoError: error.code, message: error.message }
    );
  }

  /**
   * Gestion sp√©cialis√©e des erreurs de validation Mongoose
   *
   * @private
   * @method handleValidationError
   * @param {any} error - Erreur de validation Mongoose
   * @param {string} entityName - Nom de l'entit√©
   * @returns {Error} Exception NestJS appropri√©e
   */
  private handleValidationError(error: any, entityName: string): Error {
    const validationErrors = Object.values(error.errors || {})
      .map((err: any) => err.message)
      .join(', ');

    return this.createError(
      ApplicationErrorCode.VALIDATION_FAILED,
      `Donn√©es ${entityName} invalides : ${validationErrors}`,
      'Mongoose.Validation',
      { validationErrors: error.errors }
    );
  }

  // ========== WRAPPERS SP√âCIALIS√âS POUR OP√âRATIONS CRUD ==========

  /**
   * Wrapper sp√©cialis√© pour op√©rations de lecture avec option NotFound
   *
   * @static
   * @async
   * @method handleFindOperation
   * @template T
   * @param {() => Promise<T>} operation - Op√©ration de lecture
   * @param {string} entityName - Nom de l'entit√©
   * @param {string} [entityId] - ID de l'entit√© recherch√©e
   * @param {boolean} [shouldThrowIfNotFound=false] - Lancer erreur si non trouv√©
   * @returns {Promise<T>} R√©sultat de la recherche
   */
  static async handleFindOperation<T>(
    operation: () => Promise<T>,
    entityName: string,
    entityId?: string,
    shouldThrowIfNotFound: boolean = false
  ): Promise<T> {
    const result = await this.handleDatabaseOperation(operation, {
      operationName: 'FIND',
      entityName,
      entityId
    });

    if (shouldThrowIfNotFound && !result) {
      const handler = new DatabaseErrorHandler();
      throw handler.createError(
        ApplicationErrorCode.RESOURCE_NOT_FOUND,
        `${entityName} non trouv√©${entityId ? ` (ID: ${entityId})` : ''}`,
        `FIND.${entityName}.NotFound`,
        { entityId }
      );
    }

    return result;
  }

  /**
   * Wrapper sp√©cialis√© pour op√©rations de cr√©ation
   */
  static async handleCreateOperation<T>(
    operation: () => Promise<T>,
    entityName: string,
    userId?: string
  ): Promise<T> {
    return this.handleDatabaseOperation(operation, {
      operationName: 'CREATE',
      entityName,
      userId
    });
  }

  /**
   * Wrapper sp√©cialis√© pour op√©rations de mise √† jour
   */
  static async handleUpdateOperation<T>(
    operation: () => Promise<T>,
    entityName: string,
    entityId: string,
    userId?: string
  ): Promise<T> {
    return this.handleDatabaseOperation(operation, {
      operationName: 'UPDATE',
      entityName,
      entityId,
      userId
    });
  }

  /**
   * Wrapper sp√©cialis√© pour op√©rations de suppression
   */
  static async handleDeleteOperation<T>(
    operation: () => Promise<T>,
    entityName: string,
    entityId: string,
    userId?: string
  ): Promise<T> {
    return this.handleDatabaseOperation(operation, {
      operationName: 'DELETE',
      entityName,
      entityId,
      userId
    });
  }

  /**
   * Wrapper sp√©cialis√© pour op√©rations de recherche/listing
   */
  static async handleSearchOperation<T>(
    operation: () => Promise<T>,
    entityName: string,
    query?: string
  ): Promise<T> {
    return this.handleDatabaseOperation(operation, {
      operationName: 'SEARCH',
      entityName: `${entityName}${query ? ` (query: ${query})` : ''}`
    });
  }

  /**
   * Wrapper sp√©cialis√© pour op√©rations d'agr√©gation
   */
  static async handleAggregationOperation<T>(
    operation: () => Promise<T>,
    entityName: string,
    aggregationType: string = 'stats'
  ): Promise<T> {
    return this.handleDatabaseOperation(operation, {
      operationName: 'AGGREGATION',
      entityName: `${entityName} (${aggregationType})`
    });
  }
}

/**
 * D√©corateur pour gestion automatique d'erreurs sur m√©thodes de service
 *
 * Ce d√©corateur applique automatiquement la gestion d'erreurs de base de donn√©es
 * sur les m√©thodes de service sans code r√©p√©titif. Il utilise le nom de la m√©thode
 * comme nom d'op√©ration pour le logging et le contexte.
 *
 * @function HandleDatabaseErrors
 * @param {string} entityName - Nom de l'entit√© pour messages d'erreur
 * @returns {MethodDecorator} D√©corateur de m√©thode
 *
 * @example
 * ```typescript
 * class UserService {
 *   @HandleDatabaseErrors('User')
 *   async createUser(userData: CreateUserDto) {
 *     return this.userModel.create(userData);
 *   }
 *
 *   @HandleDatabaseErrors('User')
 *   async findUserById(userId: string) {
 *     return this.userModel.findById(userId);
 *   }
 * }
 * ```
 */
export function HandleDatabaseErrors(entityName: string) {
  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {
    const method = descriptor.value;

    descriptor.value = async function (...args: any[]) {
      return DatabaseErrorHandler.handleDatabaseOperation(
        () => method.apply(this, args),
        {
          operationName: propertyName.toUpperCase(),
          entityName
        }
      );
    };

    return descriptor;
  };
}