/**
 * @fileoverview Intercepteur de transformation des r√©ponses API O'Ypunu
 *
 * Cet intercepteur normalise et standardise toutes les r√©ponses HTTP de l'API
 * en appliquant un format coh√©rent avec donn√©es, m√©tadonn√©es, statut et message.
 * Il assure une exp√©rience d√©veloppeur optimale avec des r√©ponses pr√©visibles
 * et bien structur√©es pour le frontend et les int√©grations tierces.
 *
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import {
  Injectable,
  NestInterceptor,
  ExecutionContext,
  CallHandler,
} from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

/**
 * Interface pour la structure standardis√©e des r√©ponses API
 *
 * Cette interface d√©finit le format unifi√© de toutes les r√©ponses HTTP
 * de l'API O'Ypunu pour garantir la coh√©rence et la pr√©visibilit√©.
 *
 * @interface Response
 * @template T Type des donn√©es retourn√©es
 * @version 1.0.0
 */
export interface Response<T> {
  /** Donn√©es principales de la r√©ponse */
  data: T;
  
  /** M√©tadonn√©es optionnelles (pagination, filtres, etc.) */
  meta?: {
    /** Informations de pagination pour les listes */
    pagination?: {
      /** Page actuelle (base 1) */
      page: number;
      /** Nombre d'√©l√©ments par page */
      limit: number;
      /** Nombre total d'√©l√©ments */
      total: number;
      /** Nombre total de pages */
      totalPages: number;
    };
    /** M√©tadonn√©es additionnelles sp√©cifiques au contexte */
    [key: string]: any;
  };
  
  /** Code de statut HTTP de la r√©ponse */
  statusCode: number;
  
  /** Message de statut descriptif */
  message: string;
}

/**
 * Intercepteur de transformation des r√©ponses pour standardisation API
 *
 * Cet intercepteur applique une structure de r√©ponse unifi√©e √† toutes les
 * routes de l'API O'Ypunu. Il intercepte les r√©ponses avant envoi au client
 * et les encapsule dans un format standardis√© avec donn√©es, m√©tadonn√©es,
 * statut HTTP et message descriptif.
 *
 * ## üåê Avantages de la standardisation :
 *
 * ### Coh√©rence d√©veloppeur
 * - Format pr√©visible pour toutes les r√©ponses API
 * - Int√©gration simplifi√©e pour les clients (frontend, mobile, tiers)
 * - Documentation API automatiquement coh√©rente
 * - D√©bogage facilit√© avec structure uniforme
 *
 * ### Gestion des m√©tadonn√©es intelligente
 * - Extraction automatique des m√©tadonn√©es de pagination
 * - Pr√©servation des donn√©es contextuelles
 * - Support des filtres et param√®tres de requ√™te
 * - Extensibilit√© pour nouvelles m√©tadonn√©es
 *
 * ### Robustesse et s√©curit√©
 * - Validation de type des donn√©es
 * - Gestion s√©curis√©e des propri√©t√©s optionnelles
 * - Codes de statut HTTP pr√©serv√©s
 * - Messages d'erreur standardis√©s
 *
 * @class TransformInterceptor
 * @implements {NestInterceptor<T, Response<T>>}
 * @template T Type des donn√©es √† transformer
 * @version 1.0.0
 */
@Injectable()
export class TransformInterceptor<T>
  implements NestInterceptor<T, Response<T>>
{
  /**
   * M√©thode principale d'interception et transformation
   *
   * Cette m√©thode intercepte chaque r√©ponse HTTP avant qu'elle soit
   * envoy√©e au client et applique la transformation standardis√©e.
   * Elle pr√©serve les codes de statut originaux et extrait intelligemment
   * les m√©tadonn√©es quand disponibles.
   *
   * @method intercept
   * @param {ExecutionContext} context - Contexte d'ex√©cution NestJS
   * @param {CallHandler} next - Gestionnaire de la cha√Æne d'ex√©cution
   * @returns {Observable<Response<T>>} R√©ponse transform√©e standardis√©e
   *
   * @example
   * ```typescript
   * // R√©ponse d'origine :
   * { id: 1, name: "Test", meta: { pagination: { page: 1, total: 10 } } }
   *
   * // R√©ponse transform√©e :
   * {
   *   data: { id: 1, name: "Test" },
   *   meta: { pagination: { page: 1, total: 10 } },
   *   statusCode: 200,
   *   message: "Succ√®s"
   * }
   * ```
   */
  intercept(
    context: ExecutionContext,
    next: CallHandler,
  ): Observable<Response<T>> {
    const ctx = context.switchToHttp();
    const response: import('express').Response = ctx.getResponse();

    return next.handle().pipe(
      map((data: T) => {
        // Extraire les m√©tadonn√©es si pr√©sentes dans les donn√©es
        let extractedMeta: any = undefined;
        let cleanData: T = data;

        // V√©rification s√©curis√©e de l'existence de m√©tadonn√©es
        if (typeof data === 'object' && data !== null && 'meta' in data) {
          const dataWithMeta = data as { meta?: any; [key: string]: any };
          extractedMeta = dataWithMeta.meta;
          
          // Nettoyer les donn√©es en excluant les m√©tadonn√©es
          if (extractedMeta !== undefined) {
            const { meta, ...restData } = dataWithMeta;
            cleanData = restData as T;
          }
        }

        // Construire la r√©ponse standardis√©e
        return {
          data: cleanData,
          meta: extractedMeta,
          statusCode: response.statusCode,
          message: this.getStatusMessage(response.statusCode),
        };
      }),
    );
  }

  /**
   * G√©n√©rer un message descriptif bas√© sur le code de statut HTTP
   *
   * @private
   * @method getStatusMessage
   * @param {number} statusCode - Code de statut HTTP
   * @returns {string} Message descriptif localis√©
   */
  private getStatusMessage(statusCode: number): string {
    const statusMessages: Record<number, string> = {
      200: 'Succ√®s',
      201: 'Cr√©√© avec succ√®s',
      202: 'Accept√© pour traitement',
      204: 'Succ√®s, aucun contenu',
      400: 'Requ√™te invalide',
      401: 'Non autoris√©',
      403: 'Acc√®s interdit',
      404: 'Ressource non trouv√©e',
      409: 'Conflit de donn√©es',
      422: 'Donn√©es non valides',
      500: 'Erreur serveur interne',
    };

    return statusMessages[statusCode] || 'Op√©ration termin√©e';
  }
}