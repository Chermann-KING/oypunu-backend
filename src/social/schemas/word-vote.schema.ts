/**
 * @fileoverview Sch√©ma Mongoose pour le syst√®me de votes sur mots O'Ypunu
 * 
 * Ce sch√©ma d√©finit un syst√®me de votes sophistiqu√© pour les mots
 * du dictionnaire avec r√©actions contextuelles, pond√©ration par
 * r√©putation utilisateur et protection anti-spam avanc√©e.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import { Prop, Schema, SchemaFactory } from "@nestjs/mongoose";
import { Document, Schema as MongooseSchema } from "mongoose";
import { User } from "../../users/schemas/user.schema";
import { Word } from "../../dictionary/schemas/word.schema";

/**
 * Type document Mongoose pour les votes sur mots
 * @typedef {WordVote & Document} WordVoteDocument
 */
export type WordVoteDocument = WordVote & Document;

/**
 * Sch√©ma de vote sur mot O'Ypunu - Syst√®me social avanc√©
 *
 * Syst√®me de votes sophistiqu√© pour les mots du dictionnaire,
 * inspir√© du syst√®me communaut√© mais adapt√© au contexte linguistique
 * avec r√©actions granulaires et pond√©ration intelligente.
 *
 * ## üéØ Fonctionnalit√©s principales :
 * - **R√©actions vari√©es** : like, love, helpful, accurate, clear, etc.
 * - **Syst√®me de poids** : Bas√© sur r√©putation utilisateur (0.1-5.0)
 * - **Contexte sp√©cifique** : d√©finition, prononciation, exemple, etc.
 * - **Protection anti-spam** : IP tracking et validation utilisateur
 * - **Analytics avanc√©es** : Calculs de scores et tendances
 * 
 * @class WordVote
 * @version 1.0.0
 */
@Schema({
  timestamps: true,
  collection: "word_votes",
})
export class WordVote {
  @Prop({ type: MongooseSchema.Types.ObjectId, ref: "User", required: true })
  userId: User;

  @Prop({ type: MongooseSchema.Types.ObjectId, ref: "Word", required: true })
  wordId: Word;

  @Prop({
    type: String,
    required: true,
    enum: [
      "like", // J'aime g√©n√©ral
      "love", // J'adore (engagement fort)
      "helpful", // Utile/instructif
      "accurate", // Pr√©cis/correct
      "clear", // Clair/bien expliqu√©
      "funny", // Amusant/dr√¥le
      "insightful", // Perspicace/√©clairant
      "disagree", // Pas d'accord (√©quivalent dislike constructif)
    ],
  })
  reactionType: string;

  @Prop({
    type: String,
    enum: [
      "word", // R√©action sur le mot global
      "definition", // R√©action sur une d√©finition sp√©cifique
      "pronunciation", // R√©action sur la prononciation
      "etymology", // R√©action sur l'√©tymologie
      "example", // R√©action sur un exemple d'usage
      "translation", // R√©action sur une traduction
    ],
    default: "word",
  })
  context: string;

  @Prop({ type: String })
  contextId?: string; // ID sp√©cifique (ex: ID d'une d√©finition particuli√®re)

  @Prop({ type: Number, default: 1, min: 0.1, max: 5 })
  weight: number; // Poids bas√© sur r√©putation utilisateur (0.1 = d√©butant, 5 = expert)

  @Prop({ type: String, maxlength: 500 })
  comment?: string; // Commentaire optionnel pour expliquer la r√©action

  @Prop({ type: String })
  userAgent?: string; // Pour d√©tecter les bots

  @Prop({ type: String })
  ipAddress?: string; // Pour anti-spam (hash√©)

  @Prop({ type: Date, default: Date.now })
  createdAt: Date;

  @Prop({ type: Date, default: Date.now })
  updatedAt: Date;
}

// Index pour optimiser les requ√™tes
export const WordVoteSchema = SchemaFactory.createForClass(WordVote);

// Index unique pour √©viter votes multiples sur m√™me contexte
WordVoteSchema.index(
  { userId: 1, wordId: 1, context: 1, contextId: 1 },
  { unique: true }
);

// Index pour requ√™tes fr√©quentes
WordVoteSchema.index({ wordId: 1, reactionType: 1 });
WordVoteSchema.index({ userId: 1, createdAt: -1 });
WordVoteSchema.index({ wordId: 1, createdAt: -1 });
WordVoteSchema.index({ reactionType: 1, weight: -1 });

// Middleware pour mise √† jour automatique
WordVoteSchema.pre("save", function (next) {
  this.updatedAt = new Date();
  next();
});

// M√©thodes statiques pour calculs
WordVoteSchema.statics.calculateWordScore = async function (wordId: string) {
  const pipeline = [
    { $match: { wordId: wordId } },
    {
      $group: {
        _id: "$reactionType",
        totalWeight: { $sum: "$weight" },
        count: { $sum: 1 },
      },
    },
  ];

  return this.aggregate(pipeline);
};

WordVoteSchema.statics.getTopReactedWords = async function (
  reactionType: string,
  limit: number = 10,
  timeframe?: Date
) {
  const matchStage: any = { reactionType };
  if (timeframe) {
    matchStage.createdAt = { $gte: timeframe };
  }

  const pipeline = [
    { $match: matchStage },
    {
      $group: {
        _id: "$wordId",
        totalWeight: { $sum: "$weight" },
        count: { $sum: 1 },
        avgWeight: { $avg: "$weight" },
      },
    },
    { $sort: { totalWeight: -1 as const } },
    { $limit: limit },
    {
      $lookup: {
        from: "words",
        localField: "_id",
        foreignField: "_id",
        as: "wordData",
      },
    },
  ];

  return this.aggregate(pipeline as any);
};
