/**
 * @fileoverview Service de gestion des tokens de rafra√Æchissement s√©curis√©s pour O'Ypunu
 * 
 * Ce service impl√©mente un syst√®me avanc√© de gestion des refresh tokens avec
 * rotation automatique, d√©tection de r√©utilisation, r√©vocation en cha√Æne et
 * protection contre les attaques de vol de tokens pour s√©curiser les sessions.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import {
  Injectable,
  UnauthorizedException,
  Logger,
  Inject,
} from "@nestjs/common";
import { JwtService } from "@nestjs/jwt";
import { ConfigService } from "@nestjs/config";
import { randomBytes, createHash } from "crypto";
import {
  IRefreshTokenRepository,
  RefreshToken as RefreshTokenInterface,
  CreateRefreshTokenData,
} from "../../repositories/interfaces/refresh-token.repository.interface";

/**
 * Interface des m√©tadonn√©es de token
 * 
 * @interface TokenMetadata
 */
export interface TokenMetadata {
  /** Adresse IP du client */
  ipAddress?: string;
  /** User-Agent du navigateur */
  userAgent?: string;
  /** Identifiant unique d'appareil */
  deviceId?: string;
  /** Identifiant de session */
  sessionId?: string;
}

/**
 * Interface d'une paire de tokens
 * 
 * @interface TokenPair
 */
export interface TokenPair {
  /** Token d'acc√®s JWT */
  accessToken: string;
  /** Token de rafra√Æchissement */
  refreshToken: string;
  /** Dur√©e d'expiration en secondes */
  expiresIn: number;
}

/**
 * Service de gestion des refresh tokens avec s√©curit√© avanc√©e
 * 
 * Ce service impl√©mente un syst√®me de refresh tokens hautement s√©curis√© :
 * 
 * ## üîÑ Rotation automatique :
 * - **Nouveaux tokens** : G√©n√©ration √† chaque utilisation
 * - **R√©vocation imm√©diate** : Anciens tokens invalid√©s
 * - **Cha√Ænage s√©curis√©** : Tra√ßabilit√© des remplacements
 * - **Nettoyage automatique** : Suppression des tokens expir√©s
 * 
 * ## üõ°Ô∏è D√©tection d'attaques :
 * - **R√©utilisation** : D√©tection de tokens d√©j√† utilis√©s
 * - **Vol pr√©sum√©** : R√©vocation en cascade des tokens
 * - **Anomalies IP** : Tracking des changements d'adresse
 * - **Expiration stricte** : Validation temporelle rigoureuse
 * 
 * ## üîê S√©curit√© cryptographique :
 * - **Tokens al√©atoires** : G√©n√©ration cryptographiquement s√©curis√©e
 * - **Hachage SHA-256** : Stockage s√©curis√© des tokens
 * - **Entropie maximale** : Combinaison timestamp + UUID + random
 * - **R√©vocation granulaire** : Par token, utilisateur ou cha√Æne
 * 
 * @class RefreshTokenService
 * @version 1.0.0
 */
@Injectable()
export class RefreshTokenService {
  private readonly logger = new Logger(RefreshTokenService.name);

  /**
   * Constructeur du service de refresh tokens
   * 
   * @constructor
   * @param {IRefreshTokenRepository} refreshTokenRepository - Repository des refresh tokens
   * @param {JwtService} jwtService - Service JWT de NestJS
   * @param {ConfigService} configService - Service de configuration
   */
  constructor(
    @Inject("IRefreshTokenRepository")
    private readonly refreshTokenRepository: IRefreshTokenRepository,
    private readonly jwtService: JwtService,
    private readonly configService: ConfigService
  ) {}

  /**
   * Cr√©e un nouveau refresh token s√©curis√©
   * 
   * G√©n√®re un refresh token cryptographiquement s√©curis√© avec m√©tadonn√©es
   * d'environnement pour tracking et expiration configur√©e.
   * 
   * @async
   * @method createRefreshToken
   * @param {string} userId - ID de l'utilisateur
   * @param {TokenMetadata} metadata - M√©tadonn√©es optionnelles du token
   * @returns {Promise<RefreshTokenInterface>} Token de rafra√Æchissement cr√©√©
   */
  async createRefreshToken(
    userId: string,
    metadata?: TokenMetadata
  ): Promise<RefreshTokenInterface> {
    const tokenValue = this.generateSecureToken();
    const hashedToken = this.hashToken(tokenValue);

    const expiresAt = new Date();
    expiresAt.setDate(
      expiresAt.getDate() +
        this.configService.get<number>("jwt.refreshTokenExpirationDays", 30)
    );

    const tokenData: CreateRefreshTokenData = {
      userId,
      token: tokenValue,
      hashedToken,
      expiresAt,
      ipAddress: metadata?.ipAddress,
      userAgent: metadata?.userAgent,
      isRevoked: false,
    };

    const refreshToken = await this.refreshTokenRepository.create(tokenData);

    this.logger.log(`Refresh token cr√©√© pour l'utilisateur ${userId}`);
    return refreshToken;
  }

  /**
   * Rafra√Æchit les tokens en utilisant le refresh token
   */
  async refreshTokens(
    refreshTokenValue: string,
    metadata?: TokenMetadata
  ): Promise<TokenPair> {
    const refreshToken = await this.validateRefreshToken(refreshTokenValue);

    if (!refreshToken) {
      throw new UnauthorizedException("Refresh token invalide");
    }

    // Mettre √† jour la date de derni√®re utilisation via le repository
    await this.refreshTokenRepository.updateLastUsed(
      refreshToken._id,
      metadata?.ipAddress
    );

    // G√©n√©rer le payload pour le nouvel access token
    const userPayload = {
      sub: refreshToken.userId,
      // Note: R√©cup√©rer les autres donn√©es utilisateur depuis la DB si n√©cessaire
    };

    // Rotation du refresh token pour s√©curit√© maximale
    const newTokenPair = await this.rotateRefreshToken(
      refreshToken,
      userPayload,
      metadata
    );

    this.logger.log(
      `Tokens rafra√Æchis pour l'utilisateur ${refreshToken.userId}`
    );

    return newTokenPair;
  }

  /**
   * Rotation s√©curis√©e du refresh token
   */
  private async rotateRefreshToken(
    oldToken: RefreshTokenInterface,
    userPayload: any,
    metadata?: TokenMetadata
  ): Promise<TokenPair> {
    // Cr√©er le nouveau refresh token
    const newRefreshToken = await this.createRefreshToken(
      oldToken.userId,
      metadata
    );

    // Marquer l'ancien token comme remplac√© via le repository
    await this.refreshTokenRepository.update(oldToken._id, {
      isRevoked: true,
      revokedAt: new Date(),
      revokedReason: "Replaced by rotation",
      replacedBy: newRefreshToken._id,
    });

    // Lier le nouveau token √† l'ancien via le repository
    await this.refreshTokenRepository.update(newRefreshToken._id, {
      lastUsedAt: new Date(),
    });

    // G√©n√©rer le nouvel access token
    const accessToken = this.generateAccessToken(userPayload);

    return {
      accessToken,
      refreshToken: newRefreshToken.token,
      expiresIn: this.configService.get<number>(
        "jwt.accessTokenExpirationTime",
        3600
      ),
    };
  }

  /**
   * Valide un refresh token
   */
  async validateRefreshToken(
    tokenValue: string
  ): Promise<RefreshTokenInterface | null> {
    try {
      // Utiliser le repository pour trouver un token valide
      const refreshToken =
        await this.refreshTokenRepository.findValidToken(tokenValue);

      if (!refreshToken) {
        this.logger.warn(`Tentative d'utilisation d'un refresh token invalide`);
        return null;
      }

      // D√©tecter la r√©utilisation de tokens
      const reuseDetection =
        await this.refreshTokenRepository.detectTokenReuse(tokenValue);
      if (reuseDetection.isReused) {
        this.logger.error(`R√©utilisation d√©tect√©e du refresh token`);
        // R√©voquer toute la cha√Æne de tokens par s√©curit√©
        await this.refreshTokenRepository.revokeTokenChain(
          refreshToken._id,
          "Token reuse detected"
        );
        throw new UnauthorizedException("Token compromis d√©tect√©");
      }

      return refreshToken;
    } catch (error) {
      this.logger.error(
        `Erreur lors de la validation du refresh token: ${error.message}`
      );
      return null;
    }
  }

  /**
   * R√©voque un refresh token
   */
  async revokeRefreshToken(
    token: string,
    reason: string = "Manual revocation"
  ): Promise<void> {
    const success = await this.refreshTokenRepository.revokeToken(
      token,
      reason
    );

    if (success) {
      this.logger.log(`Refresh token r√©voqu√©: ${reason}`);
    }
  }

  /**
   * R√©voque tous les refresh tokens d'un utilisateur
   */
  async revokeAllUserTokens(
    userId: string,
    reason: string = "Revoke all tokens"
  ): Promise<void> {
    const revokedCount = await this.refreshTokenRepository.revokeAllUserTokens(
      userId,
      reason
    );

    this.logger.log(
      `${revokedCount} refresh tokens r√©voqu√©s pour l'utilisateur ${userId}: ${reason}`
    );
  }

  /**
   * Nettoie les tokens expir√©s (√† ex√©cuter p√©riodiquement)
   */
  async cleanupExpiredTokens(): Promise<void> {
    const result = await this.refreshTokenRepository.cleanupExpiredTokens();

    this.logger.log(`${result.deletedCount} refresh tokens expir√©s supprim√©s`);
  }

  /**
   * G√©n√®re un access token JWT
   */
  private generateAccessToken(payload: any): string {
    return this.jwtService.sign(payload, {
      expiresIn: this.configService.get<string>(
        "jwt.accessTokenExpirationTime",
        "15m"
      ),
    });
  }

  /**
   * G√©n√®re un token cryptographiquement s√©curis√©
   */
  private generateSecureToken(): string {
    const randomBytesValue = randomBytes(32);
    const timestamp = Date.now().toString();
    const uuid = randomBytes(16).toString("hex");

    return createHash("sha256")
      .update(randomBytesValue.toString("hex") + timestamp + uuid)
      .digest("hex");
  }

  /**
   * Hache un token pour le stockage s√©curis√©
   */
  private hashToken(token: string): string {
    return createHash("sha256").update(token).digest("hex");
  }

  /**
   * G√©n√®re une paire de tokens (access + refresh) pour un utilisateur
   */
  async generateTokenPair(
    userId: string,
    userPayload: any,
    metadata?: TokenMetadata
  ): Promise<TokenPair> {
    const accessToken = this.generateAccessToken(userPayload);
    const refreshToken = await this.createRefreshToken(userId, metadata);

    return {
      accessToken,
      refreshToken: refreshToken.token,
      expiresIn: this.configService.get<number>(
        "jwt.accessTokenExpirationTime",
        3600
      ),
    };
  }

  /**
   * D√©tecte une potentielle attaque par r√©utilisation de token
   */
  async detectTokenReuse(token: string): Promise<boolean> {
    const reuseResult =
      await this.refreshTokenRepository.detectTokenReuse(token);

    if (reuseResult.isReused && reuseResult.revokedToken) {
      this.logger.error(
        `S√âCURIT√â: Tentative de r√©utilisation d'un refresh token r√©voqu√© pour l'utilisateur ${reuseResult.revokedToken.userId}`
      );

      // R√©voquer tous les tokens de cet utilisateur par mesure de s√©curit√©
      await this.revokeAllUserTokens(
        reuseResult.revokedToken.userId,
        "Token reuse detected - security measure"
      );

      return true;
    }

    return false;
  }
}
