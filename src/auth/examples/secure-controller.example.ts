import {
  Controller,
  Get,
  Post,
  Patch,
  Delete,
  Param,
  Body,
  UseGuards,
  Logger,
  ForbiddenException,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { RoleGuard, RequireRoles, UserRole } from '../guards/role.guard';
import {
  CurrentUser,
  UserId,
  CurrentUserData,
} from '../decorators/current-user.decorator';

/**
 * üîí EXEMPLE DE CONTROLLER S√âCURIS√â
 *
 * Ce controller d√©montre les bonnes pratiques de s√©curit√© :
 * - Validation des r√¥les hi√©rarchiques
 * - Utilisation s√©curis√©e des d√©corateurs
 * - V√©rifications de permissions granulaires
 * - Audit logs automatique
 */
@ApiTags('secure-example')
@Controller('secure')
@UseGuards(JwtAuthGuard) // üîê Authentification requise pour tout le controller
export class SecureControllerExample {
  private readonly logger = new Logger(SecureControllerExample.name);

  /**
   * üë§ Route accessible √† tous les utilisateurs authentifi√©s
   */
  @Get('profile')
  @ApiOperation({ summary: 'Voir son profil utilisateur' })
  @ApiResponse({ status: 200, description: 'Profil utilisateur' })
  @ApiBearerAuth()
  async getProfile(@CurrentUser() user: CurrentUserData) {
    this.logger.log(`Consultation profil par ${user.username}`);

    return {
      id: user.id,
      username: user.username,
      email: user.email,
      role: user.role,
      isEmailVerified: user.isEmailVerified,
    };
  }

  /**
   * ‚úèÔ∏è Route r√©serv√©e aux contributeurs et plus
   */
  @Post('content')
  @UseGuards(RoleGuard)
  @RequireRoles(UserRole.CONTRIBUTOR, UserRole.ADMIN, UserRole.SUPERADMIN)
  @ApiOperation({ summary: 'Cr√©er du contenu (contributeurs+)' })
  @ApiResponse({ status: 201, description: 'Contenu cr√©√©' })
  @ApiBearerAuth()
  async createContent(
    @Body() data: { title: string; content: string },
    @UserId() userId: string,
    @CurrentUser('username') username: string,
  ) {
    this.logger.log(`Cr√©ation de contenu par ${username} (${userId})`);

    // Validation m√©tier suppl√©mentaire si n√©cessaire
    if (!data.title || data.title.trim().length < 3) {
      throw new ForbiddenException('Titre trop court');
    }

    return {
      message: 'Contenu cr√©√© avec succ√®s',
      contentId: `content_${Date.now()}`,
      createdBy: username,
    };
  }

  /**
   * üõ°Ô∏è Route r√©serv√©e aux administrateurs
   */
  @Get('admin/users')
  @UseGuards(RoleGuard)
  @RequireRoles(UserRole.ADMIN, UserRole.SUPERADMIN)
  @ApiOperation({ summary: 'Lister tous les utilisateurs (admins)' })
  @ApiResponse({ status: 200, description: 'Liste des utilisateurs' })
  @ApiBearerAuth()
  async getAllUsers(@CurrentUser() admin: CurrentUserData) {
    this.logger.log(`Consultation utilisateurs par admin ${admin.username}`);

    return {
      message: 'Liste des utilisateurs',
      requestedBy: admin.username,
      adminLevel: admin.role,
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * ‚ö†Ô∏è Route r√©serv√©e aux super-administrateurs
   */
  @Delete('admin/users/:id')
  @UseGuards(RoleGuard)
  @RequireRoles(UserRole.SUPERADMIN)
  @ApiOperation({ summary: 'Supprimer un utilisateur (superadmin)' })
  @ApiResponse({ status: 200, description: 'Utilisateur supprim√©' })
  @ApiBearerAuth()
  async deleteUser(
    @Param('id') targetUserId: string,
    @CurrentUser() superAdmin: CurrentUserData,
  ) {
    // üö® AUDIT CRITIQUE : Actions de suppression
    this.logger.warn(
      `üö® SUPPRESSION UTILISATEUR: ${targetUserId} par ${superAdmin.username} (${superAdmin.id})`,
    );

    // Validation suppl√©mentaire : un superadmin ne peut pas se supprimer lui-m√™me
    if (targetUserId === superAdmin.id) {
      throw new ForbiddenException('Impossible de se supprimer soi-m√™me');
    }

    return {
      message: 'Utilisateur supprim√©',
      deletedUserId: targetUserId,
      deletedBy: superAdmin.username,
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * üîÑ Route avec validation de propri√©t√©
   * Seul le propri√©taire ou un admin peut modifier
   */
  @Patch('content/:id')
  @UseGuards(RoleGuard)
  @RequireRoles(UserRole.USER) // Au minimum utilisateur connect√©
  @ApiOperation({ summary: 'Modifier du contenu (propri√©taire ou admin)' })
  @ApiResponse({ status: 200, description: 'Contenu modifi√©' })
  @ApiBearerAuth()
  async updateContent(
    @Param('id') contentId: string,
    @Body() data: { title?: string; content?: string },
    @CurrentUser() user: CurrentUserData,
  ) {
    // Simulation : r√©cup√©rer le propri√©taire du contenu
    const contentOwnerId = 'user_123'; // Vient normalement de la DB

    // üîí Validation des permissions : propri√©taire OU admin+
    const isOwner = user.id === contentOwnerId;
    const isAdmin = ['admin', 'superadmin'].includes(user.role);

    if (!isOwner && !isAdmin) {
      this.logger.warn(
        `Tentative de modification non autoris√©e: ${user.username} -> contenu ${contentId}`,
      );
      throw new ForbiddenException(
        'Vous ne pouvez modifier que votre propre contenu',
      );
    }

    this.logger.log(
      `Modification contenu ${contentId} par ${user.username} (${isOwner ? 'propri√©taire' : 'admin'})`,
    );

    return {
      message: 'Contenu modifi√© avec succ√®s',
      contentId,
      modifiedBy: user.username,
      permission: isOwner ? 'owner' : 'admin',
    };
  }
}
