/**
 * @fileoverview DTO pour r√©initialisation de mot de passe O'Ypunu
 * 
 * Ce DTO g√®re les op√©rations de r√©initialisation de mot de passe via token
 * s√©curis√© envoy√© par email, avec validation de force du nouveau mot de passe
 * et confirmation pour garantir la s√©curit√© du processus de r√©cup√©ration.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import { IsNotEmpty, IsString } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';
import { IsStrongPassword } from '../validators/password.validator';

/**
 * DTO pour r√©initialisation s√©curis√©e de mot de passe via token
 * 
 * Classe de validation pour les demandes de r√©initialisation de mot de passe
 * utilisant un token s√©curis√© √† usage unique envoy√© par email. Garantit
 * l'authenticit√© de la demande et la force du nouveau mot de passe.
 * 
 * ## üîê Processus s√©curis√© :
 * - **Token unique** : Jeton s√©curis√© √† dur√©e limit√©e (15 minutes)
 * - **Validation email** : Seul le propri√©taire de l'email peut r√©initialiser
 * - **Force obligatoire** : Nouveau mot de passe complexe requis
 * - **Double confirmation** : Pr√©vention des erreurs de saisie
 * 
 * ## üõ°Ô∏è S√©curit√© anti-attaque :
 * - Tokens √† usage unique (invalid√©s apr√®s utilisation)
 * - Expiration automatique pour limiter fen√™tre d'attaque
 * - Rate limiting sur les demandes de r√©initialisation
 * 
 * @class ResetPasswordDto
 * @version 1.0.0
 */
export class ResetPasswordDto {
  /**
   * Token de r√©initialisation s√©curis√© re√ßu par email
   * 
   * Jeton cryptographique unique g√©n√©r√© c√¥t√© serveur et envoy√© par email
   * √† l'utilisateur. Valide 15 minutes et √† usage unique.
   * 
   * @property {string} resetToken - Token de r√©initialisation s√©curis√©
   */
  @ApiProperty({
    description: 'Token de r√©initialisation re√ßu par email',
    example: 'abc123-def456-ghi789',
  })
  @IsNotEmpty({ message: 'Le token de r√©initialisation est requis' })
  @IsString()
  resetToken: string;

  /**
   * Nouveau mot de passe avec crit√®res de s√©curit√© renforc√©s
   * 
   * Doit respecter la politique de s√©curit√© O'Ypunu identique au changement
   * de mot de passe pour maintenir la coh√©rence de s√©curit√©.
   * 
   * @property {string} newPassword - Nouveau mot de passe s√©curis√©
   */
  @ApiProperty({
    description: 'Nouveau mot de passe fort (12+ caract√®res, majuscules, minuscules, chiffres, caract√®res sp√©ciaux)',
    example: 'NewStr0ng#P@ssw0rd2025!',
    format: 'password',
    minLength: 12,
    pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};\':"\\|,.<>\\/?~`]).{12,}$',
  })
  @IsNotEmpty({ message: 'Le nouveau mot de passe est requis' })
  @IsString()
  @IsStrongPassword({
    message: 'Le nouveau mot de passe ne respecte pas les crit√®res de s√©curit√© requis'
  })
  newPassword: string;

  /**
   * Confirmation du nouveau mot de passe
   * 
   * Champ de v√©rification pour s'assurer que l'utilisateur a correctement
   * saisi son nouveau mot de passe sans erreur de frappe.
   * 
   * @property {string} confirmPassword - Confirmation identique au nouveau mot de passe
   */
  @ApiProperty({
    description: 'Confirmation du nouveau mot de passe',
    example: 'NewStr0ng#P@ssw0rd2025!',
    format: 'password',
  })
  @IsNotEmpty({ message: 'La confirmation du mot de passe est requise' })
  @IsString()
  confirmPassword: string;
}