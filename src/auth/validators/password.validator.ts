/**
 * @fileoverview Validateur de force de mot de passe pour O'Ypunu
 * 
 * Ce validateur impl√©mente une validation avanc√©e de la force des mots de passe
 * avec crit√®res de s√©curit√© stricts, d√©tection de motifs courants et √©valuation
 * intelligente de la complexit√© pour garantir la s√©curit√© des comptes utilisateur.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import {
  registerDecorator,
  ValidationOptions,
  ValidatorConstraint,
  ValidatorConstraintInterface,
  ValidationArguments,
} from 'class-validator';

/**
 * Contrainte de validation pour mots de passe forts
 * 
 * Cette classe impl√©mente une validation rigoureuse des mots de passe
 * selon les standards de s√©curit√© O'Ypunu. Elle v√©rifie la complexit√©,
 * la longueur, et d√©tecte les motifs faibles couramment utilis√©s.
 * 
 * ## üîí Crit√®res de s√©curit√© requis :
 * - **Longueur** : Minimum 12 caract√®res
 * - **Majuscules** : Au moins 1 lettre majuscule
 * - **Minuscules** : Au moins 1 lettre minuscule
 * - **Chiffres** : Au moins 1 chiffre
 * - **Sp√©ciaux** : Au moins 1 caract√®re sp√©cial
 * - **Anti-motifs** : Pas de s√©quences courantes
 * - **Anti-r√©p√©tition** : Max 2 caract√®res identiques cons√©cutifs
 * 
 * @class StrongPasswordConstraint
 * @implements ValidatorConstraintInterface
 * @version 1.0.0
 */
@ValidatorConstraint({ name: 'strongPassword', async: false })
export class StrongPasswordConstraint implements ValidatorConstraintInterface {
  /**
   * Valide la force et la s√©curit√© d'un mot de passe
   * 
   * Effectue une s√©rie de v√©rifications pour s'assurer que le mot de passe
   * respecte tous les crit√®res de s√©curit√© d√©finis par O'Ypunu.
   * 
   * @method validate
   * @param {string} password - Mot de passe √† valider
   * @param {ValidationArguments} args - Arguments de validation class-validator
   * @returns {boolean} True si le mot de passe est valide, false sinon
   */
  validate(password: string, args: ValidationArguments) {
    if (!password) return false;

    // V√©rifications de s√©curit√© requises
    const checks = {
      minLength: password.length >= 12,
      hasUpperCase: /[A-Z]/.test(password),
      hasLowerCase: /[a-z]/.test(password),
      hasNumbers: /\d/.test(password),
      hasSpecialChars: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`]/.test(password),
      noCommonPatterns: !this.hasCommonPatterns(password),
      noRepeatedChars: !this.hasRepeatedCharacters(password),
    };

    // Le mot de passe doit passer tous les tests
    return Object.values(checks).every(check => check);
  }

  /**
   * G√©n√®re un message d'erreur d√©taill√© pour les mots de passe invalides
   * 
   * Analyse le mot de passe fourni et retourne un message explicatif
   * listant tous les crit√®res non respect√©s pour guider l'utilisateur.
   * 
   * @method defaultMessage
   * @param {ValidationArguments} args - Arguments contenant le mot de passe √† analyser
   * @returns {string} Message d'erreur d√©taill√© avec les crit√®res manquants
   */
  defaultMessage(args: ValidationArguments) {
    const password = args.value as string;
    const failedChecks: string[] = [];

    if (!password) {
      return 'Le mot de passe est requis';
    }

    if (password.length < 12) {
      failedChecks.push('au moins 12 caract√®res');
    }
    if (!/[A-Z]/.test(password)) {
      failedChecks.push('au moins une lettre majuscule');
    }
    if (!/[a-z]/.test(password)) {
      failedChecks.push('au moins une lettre minuscule');
    }
    if (!/\d/.test(password)) {
      failedChecks.push('au moins un chiffre');
    }
    if (!/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`]/.test(password)) {
      failedChecks.push('au moins un caract√®re sp√©cial (!@#$%^&*...)');
    }
    if (this.hasCommonPatterns(password)) {
      failedChecks.push('√©viter les motifs courants (123, abc, qwerty...)');
    }
    if (this.hasRepeatedCharacters(password)) {
      failedChecks.push('√©viter les caract√®res r√©p√©t√©s cons√©cutifs');
    }

    return `Le mot de passe doit contenir : ${failedChecks.join(', ')}`;
  }

  /**
   * D√©tecte les motifs courants dans un mot de passe
   * 
   * V√©rifie la pr√©sence de s√©quences pr√©visibles ou de mots communs
   * qui r√©duisent significativement la s√©curit√© du mot de passe.
   * 
   * @private
   * @method hasCommonPatterns
   * @param {string} password - Mot de passe √† analyser
   * @returns {boolean} True si des motifs courants sont d√©tect√©s
   */
  private hasCommonPatterns(password: string): boolean {
    const commonPatterns = [
      /123/i,      // S√©quences num√©riques
      /abc/i,      // S√©quences alphab√©tiques  
      /qwerty/i,   // Dispositions clavier QWERTY
      /azerty/i,   // Dispositions clavier AZERTY
      /password/i, // Mots √©vidents anglais
      /motdepasse/i, // Mots √©vidents fran√ßais
      /admin/i,    // Termes administratifs
      /user/i,     // Termes utilisateur
      /oypunu/i,   // Sp√©cifique √† l'application
    ];

    return commonPatterns.some(pattern => pattern.test(password));
  }

  /**
   * D√©tecte les caract√®res r√©p√©t√©s cons√©cutivement
   * 
   * V√©rifie s'il y a plus de 2 caract√®res identiques d'affil√©e,
   * ce qui indique un motif faible r√©duisant l'entropie.
   * 
   * @private
   * @method hasRepeatedCharacters
   * @param {string} password - Mot de passe √† analyser
   * @returns {boolean} True si plus de 2 caract√®res cons√©cutifs identiques
   */
  private hasRepeatedCharacters(password: string): boolean {
    // V√©rifier si il y a plus de 2 caract√®res identiques cons√©cutifs
    return /(.)\1{2,}/.test(password);
  }
}

/**
 * D√©corateur pour valider la force d'un mot de passe selon les standards O'Ypunu
 * 
 * Ce d√©corateur applique automatiquement la validation StrongPasswordConstraint
 * sur les propri√©t√©s de DTO pour garantir la s√©curit√© des mots de passe.
 * 
 * ## Exigences de s√©curit√© :
 * - **Minimum 12 caract√®res** pour r√©sister aux attaques par force brute
 * - **Au moins une majuscule** pour augmenter la complexit√©
 * - **Au moins une minuscule** pour diversifier les caract√®res
 * - **Au moins un chiffre** pour introduire des √©l√©ments num√©riques
 * - **Au moins un caract√®re sp√©cial** pour maximiser l'entropie
 * - **Pas de motifs courants** (123, abc, qwerty, etc.)
 * - **Pas plus de 2 caract√®res identiques cons√©cutifs**
 * 
 * @function IsStrongPassword
 * @param {ValidationOptions} validationOptions - Options de validation optionnelles
 * @returns {PropertyDecorator} D√©corateur de propri√©t√© class-validator
 * 
 * @example
 * ```typescript
 * export class ChangePasswordDto {
 *   @IsStrongPassword({ message: 'Mot de passe trop faible' })
 *   newPassword: string;
 * }
 * ```
 */
export function IsStrongPassword(validationOptions?: ValidationOptions) {
  return function (object: Object, propertyName: string) {
    registerDecorator({
      target: object.constructor,
      propertyName: propertyName,
      options: validationOptions,
      constraints: [],
      validator: StrongPasswordConstraint,
    });
  };
}

/**
 * Utilitaire d'√©valuation intelligente de la force des mots de passe
 * 
 * Cette classe fournit une √©valuation avanc√©e de la force des mots de passe
 * avec scoring d√©taill√©, classification par niveau et recommandations
 * d'am√©lioration pour guider les utilisateurs vers de meilleurs mots de passe.
 * 
 * ## Syst√®me de scoring (100 points max) :
 * - **Longueur** : 40 points (base + bonus pour longueur √©tendue)
 * - **Complexit√©** : 40 points (majuscules, minuscules, chiffres, sp√©ciaux)
 * - **Diversit√©** : 20 points (unicit√©, absence de motifs)
 * 
 * ## Niveaux de force :
 * - **very-strong** : 90-100 points (excellent)
 * - **strong** : 75-89 points (tr√®s bon)
 * - **good** : 60-74 points (acceptable)
 * - **fair** : 40-59 points (faible)
 * - **weak** : 20-39 points (tr√®s faible)
 * - **very-weak** : 0-19 points (inacceptable)
 * 
 * @class PasswordStrengthEvaluator
 * @version 1.0.0
 */
export class PasswordStrengthEvaluator {
  /**
   * √âvalue la force d'un mot de passe avec scoring et recommandations
   * 
   * Analyse compl√®te d'un mot de passe retournant un score d√©taill√©,
   * un niveau de s√©curit√© et des suggestions d'am√©lioration sp√©cifiques.
   * 
   * @static
   * @method evaluate
   * @param {string} password - Mot de passe √† √©valuer
   * @returns {Object} Objet contenant score, niveau et recommandations
   */
  static evaluate(password: string): {
    score: number;
    level: 'very-weak' | 'weak' | 'fair' | 'good' | 'strong' | 'very-strong';
    feedback: string[];
  } {
    if (!password) {
      return {
        score: 0,
        level: 'very-weak',
        feedback: ['Mot de passe requis'],
      };
    }

    let score = 0;
    const feedback: string[] = [];

    // Longueur (40 points max)
    if (password.length >= 12) {
      score += 25;
    } else if (password.length >= 8) {
      score += 15;
      feedback.push('Augmentez la longueur √† 12+ caract√®res');
    } else {
      feedback.push('Minimum 8 caract√®res requis');
    }

    if (password.length >= 16) score += 10;
    if (password.length >= 20) score += 5;

    // Complexit√© des caract√®res (40 points max)
    if (/[a-z]/.test(password)) score += 10;
    else feedback.push('Ajoutez des lettres minuscules');

    if (/[A-Z]/.test(password)) score += 10;
    else feedback.push('Ajoutez des lettres majuscules');

    if (/\d/.test(password)) score += 10;
    else feedback.push('Ajoutez des chiffres');

    if (/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`]/.test(password)) score += 10;
    else feedback.push('Ajoutez des caract√®res sp√©ciaux');

    // Diversit√© et patterns (20 points max)
    const uniqueChars = new Set(password).size;
    if (uniqueChars >= password.length * 0.8) score += 10;
    else feedback.push('Variez davantage les caract√®res');

    if (!/(.)\\1{2,}/.test(password)) score += 5;
    else feedback.push('√âvitez les caract√®res r√©p√©t√©s');

    if (!/123|abc|qwerty|azerty|password/i.test(password)) score += 5;
    else feedback.push('√âvitez les motifs courants');

    // D√©terminer le niveau
    let level: any;
    if (score >= 90) level = 'very-strong';
    else if (score >= 75) level = 'strong';
    else if (score >= 60) level = 'good';
    else if (score >= 40) level = 'fair';
    else if (score >= 20) level = 'weak';
    else level = 'very-weak';

    return { score, level, feedback };
  }
}