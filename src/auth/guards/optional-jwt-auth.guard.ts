/**
 * @fileoverview Guard d'authentification JWT optionnelle pour O'Ypunu
 * 
 * Ce guard √©tend JwtAuthGuard pour fournir une authentification optionnelle
 * qui n'interrompt pas le traitement si aucun token n'est fourni. Id√©al
 * pour les endpoints publics qui adaptent leur comportement selon l'authentification.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import { Injectable, ExecutionContext } from '@nestjs/common';
import { JwtAuthGuard } from './jwt-auth.guard';

/**
 * Guard d'authentification JWT optionnelle pour endpoints hybrides
 * 
 * Extension du JwtAuthGuard qui permet un acc√®s aux endpoints m√™me sans
 * authentification, tout en injectant les donn√©es utilisateur si un token
 * valide est fourni. Parfait pour les fonctionnalit√©s qui s'adaptent selon
 * le statut d'authentification (ex: contenu personnalis√© vs public).
 * 
 * ## üéØ Cas d'usage typiques :
 * - **Contenu adaptatif** : Personnalis√© si connect√©, g√©n√©rique sinon
 * - **API publiques enrichies** : Fonctionnalit√©s bonus pour utilisateurs connect√©s
 * - **Analytics optionnelles** : Tracking anonyme vs utilisateur identifi√©
 * - **Recommandations hybrides** : Personnalis√©es vs populaires
 * 
 * ## üí° Comportement :
 * - **Token valide** ‚Üí req.user peupl√© avec donn√©es utilisateur
 * - **Token invalide/absent** ‚Üí req.user = null, endpoint accessible
 * - **Pas d'exception** ‚Üí Contrairement √† JwtAuthGuard standard
 * 
 * @example
 * ```typescript
 * @UseGuards(OptionalJwtAuthGuard)
 * @Get('recommendations')
 * async getRecommendations(@CurrentUser() user?: CurrentUserData) {
 *   if (user) {
 *     return this.getPersonalizedRecommendations(user.id);
 *   }
 *   return this.getPublicRecommendations();
 * }
 * ```
 * 
 * @class OptionalJwtAuthGuard
 * @extends JwtAuthGuard
 * @version 1.0.0
 */
@Injectable()
export class OptionalJwtAuthGuard extends JwtAuthGuard {
  /**
   * G√®re la requ√™te d'authentification de mani√®re permissive
   * 
   * Override de la m√©thode handleRequest pour permettre l'acc√®s m√™me
   * en cas d'√©chec d'authentification, contrairement au comportement
   * standard qui lancerait une UnauthorizedException.
   * 
   * @method handleRequest
   * @param {any} err - Erreur √©ventuelle lors de l'authentification
   * @param {any} user - Donn√©es utilisateur d√©cod√©es du JWT (si valide)
   * @param {any} info - Informations additionnelles sur l'authentification
   * @param {ExecutionContext} context - Contexte d'ex√©cution NestJS
   * @returns {any} Utilisateur si authentifi√©, null sinon (pas d'exception)
   */
  handleRequest(err: any, user: any, info: any, context: ExecutionContext) {
    // Si une erreur ou pas d'utilisateur, on continue sans authentification
    // (contrairement au JwtAuthGuard qui lance une exception)
    if (err || !user) {
      return null;
    }
    return user;
  }

  /**
   * D√©termine si la requ√™te peut √™tre activ√©e (toujours true)
   * 
   * Override de canActivate pour s'assurer que l'endpoint reste accessible
   * m√™me si l'authentification JWT √©choue. Capture les exceptions et
   * permet la continuation du traitement.
   * 
   * @method canActivate
   * @param {ExecutionContext} context - Contexte d'ex√©cution NestJS
   * @returns {boolean} Toujours true pour permettre l'acc√®s
   */
  canActivate(context: ExecutionContext) {
    try {
      return super.canActivate(context);
    } catch (error) {
      // En cas d'erreur d'authentification, on continue sans utilisateur
      return true;
    }
  }
}
