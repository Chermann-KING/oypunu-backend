/**
 * @fileoverview Guard de contr√¥le d'acc√®s par r√¥les pour O'Ypunu
 * 
 * Ce guard impl√©mente un syst√®me de contr√¥le d'acc√®s granulaire bas√©
 * sur les r√¥les utilisateur avec hi√©rarchie et validation en temps r√©el.
 * Il v√©rifie les permissions, l'activit√© des comptes et la validit√©
 * des utilisateurs directement en base de donn√©es.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import {
  Injectable,
  CanActivate,
  ExecutionContext,
  ForbiddenException,
  Logger,
} from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { User, UserDocument } from '../../users/schemas/user.schema';

/**
 * √ânum√©ration des r√¥les utilisateur avec hi√©rarchie croissante
 * 
 * @enum {string} UserRole
 */
export enum UserRole {
  /** Utilisateur de base avec acc√®s limit√© */
  USER = 'user',
  /** Contributeur avec droits de soumission */
  CONTRIBUTOR = 'contributor',
  /** Administrateur avec droits de mod√©ration */
  ADMIN = 'admin',
  /** Super-administrateur avec acc√®s complet */
  SUPERADMIN = 'superadmin',
}

/**
 * Hi√©rarchie num√©rique des r√¥les pour validation des permissions
 * Les valeurs plus √©lev√©es incluent automatiquement les permissions inf√©rieures
 * 
 * @constant {Object} ROLE_HIERARCHY
 */
const ROLE_HIERARCHY = {
  [UserRole.USER]: 1,        // Niveau de base
  [UserRole.CONTRIBUTOR]: 2, // Inclut USER
  [UserRole.ADMIN]: 3,       // Inclut USER + CONTRIBUTOR  
  [UserRole.SUPERADMIN]: 4,  // Inclut tous les r√¥les
};

/**
 * Guard de contr√¥le d'acc√®s par r√¥les avec validation en temps r√©el
 * 
 * Ce guard impl√©mente un syst√®me de s√©curit√© avanc√© qui :
 * - V√©rifie les r√¥les requis via les m√©tadonn√©es de d√©corateurs
 * - Valide l'utilisateur en temps r√©el en base de donn√©es
 * - Contr√¥le l'activit√© et la validit√© des comptes
 * - Applique une hi√©rarchie de permissions granulaire
 * 
 * ## Utilisation avec d√©corateur :
 * 
 * ```typescript
 * @UseGuards(JwtAuthGuard, RoleGuard)
 * @RequireRoles(UserRole.ADMIN, UserRole.SUPERADMIN)
 * @Post('admin-action')
 * async adminAction() {
 *   // Seuls les admins et superadmins peuvent acc√©der
 * }
 * ```
 * 
 * ## S√©curit√© :
 * - Validation en temps r√©el contre la base de donn√©es
 * - V√©rification de l'activit√© des comptes
 * - Logging d√©taill√© des tentatives d'acc√®s
 * - Protection contre les tokens compromis
 * 
 * @class RoleGuard
 * @implements CanActivate
 * @version 1.0.0
 */
@Injectable()
export class RoleGuard implements CanActivate {
  private readonly logger = new Logger(RoleGuard.name);

  /**
   * Constructeur du guard de r√¥les
   * 
   * @constructor
   * @param {Reflector} reflector - Service de r√©flexion pour m√©tadonn√©es
   * @param {Model<UserDocument>} userModel - Mod√®le Mongoose des utilisateurs
   */
  constructor(
    private reflector: Reflector,
    @InjectModel(User.name) private userModel: Model<UserDocument>,
  ) {}

  /**
   * M√©thode principale de validation d'acc√®s
   * 
   * Cette m√©thode effectue une validation compl√®te en plusieurs √©tapes :
   * 1. Extraction des r√¥les requis depuis les m√©tadonn√©es
   * 2. Validation de l'utilisateur authentifi√©
   * 3. V√©rification en temps r√©el en base de donn√©es
   * 4. Contr√¥le d'activit√© du compte
   * 5. V√©rification des permissions hi√©rarchiques
   * 
   * @async
   * @method canActivate
   * @param {ExecutionContext} context - Contexte d'ex√©cution NestJS
   * @returns {Promise<boolean>} True si acc√®s autoris√©, false ou exception sinon
   * @throws {ForbiddenException} Si permissions insuffisantes ou compte invalide
   */
  async canActivate(context: ExecutionContext): Promise<boolean> {
    // R√©cup√©rer les r√¥les requis depuis les m√©tadonn√©es du d√©corateur @RequireRoles
    const requiredRoles = this.reflector.getAllAndOverride<UserRole[]>(
      'roles',
      [context.getHandler(), context.getClass()],
    );

    // Si aucun r√¥le n'est sp√©cifi√©, autoriser l'acc√®s (endpoint public)
    if (!requiredRoles || requiredRoles.length === 0) {
      return true;
    }

    const request = context.switchToHttp().getRequest();
    const user = request.user;

    // V√©rifier la pr√©sence d'un utilisateur authentifi√©
    if (!user) {
      this.logger.warn("Tentative d'acc√®s sans utilisateur authentifi√©");
      throw new ForbiddenException('Utilisateur non authentifi√©');
    }

    // üîí VALIDATION CRITIQUE : V√©rifier l'utilisateur en base de donn√©es
    // Ceci prot√®ge contre les tokens compromis ou les utilisateurs supprim√©s
    const dbUser = await this.validateUserInDatabase(user.id || user._id);

    if (!dbUser) {
      this.logger.error(
        `Utilisateur ${user.id} introuvable en base de donn√©es`,
      );
      throw new ForbiddenException('Utilisateur invalide');
    }

    // V√©rifier si l'utilisateur est actif
    if (!dbUser.isActive) {
      this.logger.warn(
        `Tentative d'acc√®s par utilisateur inactif: ${dbUser.username}`,
      );
      throw new ForbiddenException('Compte utilisateur d√©sactiv√©');
    }

    // V√©rifier la hi√©rarchie des r√¥les avec les permissions requises
    const hasPermission = this.checkRolePermission(dbUser.role, requiredRoles);

    if (!hasPermission) {
      this.logger.warn(
        `Acc√®s refus√© pour ${dbUser.username} (${dbUser.role}). R√¥les requis: ${requiredRoles.join(', ')}`,
      );
      throw new ForbiddenException('Permissions insuffisantes');
    }

    // ‚úÖ Mettre √† jour le request avec les donn√©es fra√Æches de l'utilisateur
    // Ceci garantit que les contr√¥leurs ont acc√®s aux donn√©es les plus r√©centes
    request.user = {
      ...request.user,
      role: dbUser.role,
      isActive: dbUser.isActive,
      username: dbUser.username,
    };

    this.logger.log(`Acc√®s autoris√© pour ${dbUser.username} (${dbUser.role})`);
    return true;
  }

  /**
   * Valide que l'utilisateur existe toujours en base de donn√©es
   * 
   * Cette m√©thode effectue une requ√™te en temps r√©el pour s'assurer
   * que l'utilisateur existe toujours, est actif, et r√©cup√®re ses
   * informations de r√¥le √† jour. Ceci prot√®ge contre l'utilisation
   * de tokens JWT valid√©s mais pour des comptes supprim√©s ou d√©sactiv√©s.
   * 
   * @private
   * @async
   * @method validateUserInDatabase
   * @param {string} userId - ID de l'utilisateur √† valider
   * @returns {Promise<UserDocument | null>} Document utilisateur ou null si introuvable
   */
  private async validateUserInDatabase(
    userId: string,
  ): Promise<UserDocument | null> {
    try {
      return await this.userModel
        .findById(userId)
        .select('role isActive username isEmailVerified') // S√©lection s√©curis√©e des champs n√©cessaires
        .exec();
    } catch (error) {
      this.logger.error(
        `Erreur lors de la validation de l'utilisateur ${userId}:`,
        error,
      );
      return null;
    }
  }

  /**
   * V√©rifie si le r√¥le de l'utilisateur satisfait les exigences
   * 
   * Cette m√©thode impl√©mente la logique de hi√©rarchie des r√¥les :
   * - Un r√¥le sup√©rieur inclut automatiquement les permissions inf√©rieures
   * - La v√©rification se fait sur la base de niveaux num√©riques croissants
   * - L'utilisateur doit avoir au moins un des r√¥les requis
   * 
   * @private
   * @method checkRolePermission
   * @param {string} userRole - R√¥le actuel de l'utilisateur
   * @param {UserRole[]} requiredRoles - Liste des r√¥les autoris√©s
   * @returns {boolean} True si l'utilisateur a les permissions suffisantes
   * 
   * @example
   * ```typescript
   * // Un ADMIN (niveau 3) peut acc√©der aux endpoints CONTRIBUTOR (niveau 2)
   * checkRolePermission('admin', [UserRole.CONTRIBUTOR]) // returns true
   * 
   * // Un USER (niveau 1) ne peut pas acc√©der aux endpoints ADMIN (niveau 3) 
   * checkRolePermission('user', [UserRole.ADMIN]) // returns false
   * ```
   */
  private checkRolePermission(
    userRole: string,
    requiredRoles: UserRole[],
  ): boolean {
    const userLevel = ROLE_HIERARCHY[userRole as UserRole] || 0;

    // V√©rifier si l'utilisateur a au moins un des r√¥les requis
    // Un niveau sup√©rieur ou √©gal satisfait l'exigence
    return requiredRoles.some((requiredRole) => {
      const requiredLevel = ROLE_HIERARCHY[requiredRole] || 0;
      return userLevel >= requiredLevel;
    });
  }
}

/**
 * D√©corateur pour sp√©cifier les r√¥les requis sur les endpoints
 * 
 * Ce d√©corateur permet de d√©finir facilement les r√¥les autoris√©s
 * pour acc√©der √† un endpoint sp√©cifique. Il stocke les r√¥les dans
 * les m√©tadonn√©es qui seront lues par le RoleGuard.
 * 
 * @function RequireRoles
 * @param {...UserRole[]} roles - R√¥les autoris√©s (un ou plusieurs)
 * @returns {MethodDecorator} D√©corateur de m√©thode NestJS
 * 
 * @example
 * ```typescript
 * @UseGuards(JwtAuthGuard, RoleGuard)
 * @RequireRoles(UserRole.ADMIN, UserRole.SUPERADMIN)
 * @Post('admin-action')
 * async adminAction() {
 *   // Seuls les admins et superadmins peuvent acc√©der
 * }
 * 
 * @RequireRoles(UserRole.CONTRIBUTOR)
 * @Post('contribute')
 * async contribute() {
 *   // Contributors, admins et superadmins peuvent acc√©der
 * }
 * ```
 */
import { SetMetadata } from '@nestjs/common';

export const RequireRoles = (...roles: UserRole[]) =>
  SetMetadata('roles', roles);
