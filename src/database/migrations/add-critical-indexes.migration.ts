/**
 * @fileoverview Migration critique d'ajout d'index de performance MongoDB
 * 
 * Cette migration fondamentale optimise drastiquement les performances
 * de la base de donn√©es O'Ypunu en ajoutant tous les index critiques
 * identifi√©s lors de l'audit de performance. Elle am√©liore significativement
 * les temps de r√©ponse des requ√™tes fr√©quentes et complexes.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import { Injectable, Logger } from '@nestjs/common';
import { InjectConnection } from '@nestjs/mongoose';
import { Connection } from 'mongoose';

/**
 * Migration d'ajout d'index critiques pour optimisation performance
 * 
 * Cette migration critique impl√©mente une strat√©gie d'indexation compl√®te
 * pour toutes les collections principales de l'application O'Ypunu.
 * Elle couvre les patterns de requ√™tes les plus fr√©quents et complexes :
 * 
 * ## Index ajout√©s par collection :
 * 
 * ### üë§ Users (6 index)
 * - email (unique) : Authentification et recherche utilisateur
 * - username (unique) : Recherche et profils utilisateur
 * - role : Filtrage par r√¥le (admin, contributeur, etc.)
 * - isEmailVerified : Filtrage utilisateurs v√©rifi√©s
 * - email + isEmailVerified : Authentification optimis√©e
 * 
 * ### üìö Words (10 index)
 * - word : Recherche textuelle principale
 * - status : Filtrage par statut (pending, approved, rejected)
 * - language : Filtrage par langue (crucial pour navigation)
 * - category : Filtrage par cat√©gorie grammaticale
 * - contributedBy : Mots par contributeur
 * - status + language : Requ√™tes approuv√©es par langue
 * - language + category : Navigation th√©matique
 * - status + language + category : Requ√™tes complexes
 * - Full-text search : Recherche avanc√©e avec pond√©ration
 * - createdAt : Tri chronologique
 * 
 * ### üèòÔ∏è Communities (4 index)
 * - language : Recherche communaut√©s par langue
 * - name : Recherche par nom de communaut√©
 * - createdBy : Communaut√©s par cr√©ateur
 * - membersCount : Tri par popularit√©
 * 
 * ### üí¨ Messages (3 index)
 * - conversation + createdAt : Performance chat temps r√©el
 * - sender : Messages par exp√©diteur
 * - readBy.user : Gestion messages lus (sparse)
 * 
 * ### üìà ActivityFeed (3 index)
 * - user + createdAt : Flux activit√© personnel
 * - type : Filtrage par type d'activit√©
 * - type + createdAt : Flux global par type
 * 
 * ### üîê RefreshTokens (3 index)
 * - token (unique) : Authentification token
 * - user : Tokens par utilisateur
 * - expiresAt (TTL) : Nettoyage automatique
 * 
 * ## Optimisations techniques :
 * - Index background pour √©viter le blocage
 * - Index compos√©s pour requ√™tes multi-crit√®res
 * - Index TTL pour nettoyage automatique
 * - Index sparse pour champs optionnels
 * - Pond√©ration pour recherche textuelle
 * - Rollback complet avec suppression s√©lective
 * 
 * @class AddCriticalIndexesMigration
 * @version 1.0.0
 */
@Injectable()
export class AddCriticalIndexesMigration {
  private readonly logger = new Logger(AddCriticalIndexesMigration.name);

  constructor(@InjectConnection() private connection: Connection) {}

  /**
   * Ex√©cute la migration d'ajout des index critiques
   * 
   * Cette m√©thode principale orchestre l'ajout de tous les index
   * critiques sur toutes les collections. Elle proc√®de de mani√®re
   * s√©quentielle pour garantir la coh√©rence et g√®re les erreurs
   * avec rollback automatique si n√©cessaire.
   * 
   * ## Ordre d'ex√©cution optimis√© :
   * 1. Users - Base utilisateur (priorit√© authentification)
   * 2. Words - Collection principale (c≈ìur m√©tier)
   * 3. Communities - Structure sociale
   * 4. Messages - Communication temps r√©el
   * 5. ActivityFeed - Notifications et activit√©
   * 6. RefreshTokens - S√©curit√© et sessions
   * 
   * @async
   * @method up
   * @returns {Promise<void>}
   * @throws {Error} Si la cr√©ation d'un index √©choue
   * 
   * @example
   * ```typescript
   * // Ex√©cution manuelle via CLI
   * await migrationService.runCriticalIndexesMigration();
   * 
   * // Ou via le service de migration
   * const migration = new AddCriticalIndexesMigration(connection);
   * await migration.up();
   * ```
   */
  async up(): Promise<void> {
    this.logger.log('üóÇÔ∏è D√©but de la migration - Ajout des indexes critiques');

    try {
      // Index pour la collection Users
      await this.addUserIndexes();
      
      // Index pour la collection Words
      await this.addWordIndexes();
      
      // Index pour la collection Communities
      await this.addCommunityIndexes();
      
      // Index pour la collection Messages
      await this.addMessageIndexes();
      
      // Index pour la collection ActivityFeed
      await this.addActivityFeedIndexes();
      
      // Index pour la collection RefreshTokens
      await this.addRefreshTokenIndexes();

      this.logger.log('‚úÖ Migration termin√©e avec succ√®s - Tous les indexes cr√©√©s');
      
      // Afficher les statistiques
      await this.showIndexStats();
      
    } catch (error) {
      this.logger.error('‚ùå Erreur lors de la migration:', error);
      throw error;
    }
  }

  /**
   * üë§ Ajouter les indexes pour la collection Users
   */
  private async addUserIndexes(): Promise<void> {
    this.logger.log('üìß Ajout des indexes Users...');
    const userCollection = this.connection.collection('users');

    // Index sur email - recherche et authentification
    await userCollection.createIndex(
      { email: 1 },
      { 
        unique: true,
        name: 'idx_users_email_unique',
        background: true
      }
    );

    // Index sur username - recherche utilisateur
    await userCollection.createIndex(
      { username: 1 },
      { 
        unique: true,
        name: 'idx_users_username_unique',
        background: true
      }
    );

    // Index sur role - filtrage par r√¥le
    await userCollection.createIndex(
      { role: 1 },
      { 
        name: 'idx_users_role',
        background: true
      }
    );

    // Index sur isEmailVerified - filtrage utilisateurs v√©rifi√©s
    await userCollection.createIndex(
      { isEmailVerified: 1 },
      { 
        name: 'idx_users_email_verified',
        background: true
      }
    );

    // Index compos√© sur email + isEmailVerified (authentification)
    await userCollection.createIndex(
      { email: 1, isEmailVerified: 1 },
      { 
        name: 'idx_users_email_verification',
        background: true
      }
    );

    this.logger.log('‚úÖ Indexes Users cr√©√©s');
  }

  /**
   * üìö Ajouter les indexes pour la collection Words
   */
  private async addWordIndexes(): Promise<void> {
    this.logger.log('üìö Ajout des indexes Words...');
    const wordCollection = this.connection.collection('words');

    // Index sur le champ word - recherche textuelle
    await wordCollection.createIndex(
      { word: 1 },
      { 
        name: 'idx_words_word_text',
        background: true
      }
    );

    // Index sur status - filtrage par statut
    await wordCollection.createIndex(
      { status: 1 },
      { 
        name: 'idx_words_status',
        background: true
      }
    );

    // Index sur language - filtrage par langue
    await wordCollection.createIndex(
      { language: 1 },
      { 
        name: 'idx_words_language',
        background: true
      }
    );

    // Index sur category - filtrage par cat√©gorie
    await wordCollection.createIndex(
      { category: 1 },
      { 
        name: 'idx_words_category',
        background: true
      }
    );

    // Index sur contributedBy - mots par utilisateur
    await wordCollection.createIndex(
      { contributedBy: 1 },
      { 
        name: 'idx_words_contributor',
        background: true
      }
    );

    // Index compos√© critique - status + language (requ√™tes approuv√©es par langue)
    await wordCollection.createIndex(
      { status: 1, language: 1 },
      { 
        name: 'idx_words_status_language',
        background: true
      }
    );

    // Index compos√© - language + category (navigation par langue et cat√©gorie)
    await wordCollection.createIndex(
      { language: 1, category: 1 },
      { 
        name: 'idx_words_language_category',
        background: true
      }
    );

    // Index compos√© - status + language + category (requ√™tes complexes)
    await wordCollection.createIndex(
      { status: 1, language: 1, category: 1 },
      { 
        name: 'idx_words_status_language_category',
        background: true
      }
    );

    // Index textuel pour recherche full-text
    await wordCollection.createIndex(
      { 
        word: 'text',
        'meanings.definition': 'text',
        'meanings.examples': 'text'
      },
      { 
        name: 'idx_words_fulltext_search',
        background: true,
        weights: {
          word: 10,
          'meanings.definition': 5,
          'meanings.examples': 1
        }
      }
    );

    // Index sur createdAt - tri chronologique
    await wordCollection.createIndex(
      { createdAt: -1 },
      { 
        name: 'idx_words_created_desc',
        background: true
      }
    );

    // Index sur isFeatured + status pour findFeatured() optimis√©
    await wordCollection.createIndex(
      { isFeatured: 1, status: 1 },
      { 
        name: 'idx_words_featured_status',
        background: true
      }
    );

    // Index sur categoryId + createdBy pour requ√™tes avec populate optimis√©
    await wordCollection.createIndex(
      { categoryId: 1, createdBy: 1 },
      { 
        name: 'idx_words_category_creator',
        background: true
      }
    );

    this.logger.log('‚úÖ Indexes Words cr√©√©s');
  }

  /**
   * üèòÔ∏è Ajouter les indexes pour la collection Communities
   */
  private async addCommunityIndexes(): Promise<void> {
    this.logger.log('üèòÔ∏è Ajout des indexes Communities...');
    const communityCollection = this.connection.collection('communities');

    // Index sur language - recherche par langue
    await communityCollection.createIndex(
      { language: 1 },
      { 
        name: 'idx_communities_language',
        background: true
      }
    );

    // Index sur name - recherche par nom
    await communityCollection.createIndex(
      { name: 1 },
      { 
        name: 'idx_communities_name',
        background: true
      }
    );

    // Index sur createdBy - communaut√©s par cr√©ateur
    await communityCollection.createIndex(
      { createdBy: 1 },
      { 
        name: 'idx_communities_creator',
        background: true
      }
    );

    // Index sur membersCount - tri par popularit√©
    await communityCollection.createIndex(
      { membersCount: -1 },
      { 
        name: 'idx_communities_members_desc',
        background: true
      }
    );

    this.logger.log('‚úÖ Indexes Communities cr√©√©s');
  }

  /**
   * üí¨ Ajouter les indexes pour la collection Messages
   */
  private async addMessageIndexes(): Promise<void> {
    this.logger.log('üí¨ Ajout des indexes Messages...');
    const messageCollection = this.connection.collection('messages');

    // Index compos√© critique - conversation + timestamp (chat performance)
    await messageCollection.createIndex(
      { conversation: 1, createdAt: -1 },
      { 
        name: 'idx_messages_conversation_timestamp',
        background: true
      }
    );

    // Index sur sender - messages par exp√©diteur
    await messageCollection.createIndex(
      { sender: 1 },
      { 
        name: 'idx_messages_sender',
        background: true
      }
    );

    // Index sur readBy - gestion des messages lus
    await messageCollection.createIndex(
      { 'readBy.user': 1 },
      { 
        name: 'idx_messages_read_by',
        sparse: true,
        background: true
      }
    );

    this.logger.log('‚úÖ Indexes Messages cr√©√©s');
  }

  /**
   * üìà Ajouter les indexes pour la collection ActivityFeed
   */
  private async addActivityFeedIndexes(): Promise<void> {
    this.logger.log('üìà Ajout des indexes ActivityFeed...');
    const activityCollection = this.connection.collection('activityfeeds');

    // Index compos√© critique - user + timestamp (flux activit√© personnel)
    await activityCollection.createIndex(
      { user: 1, createdAt: -1 },
      { 
        name: 'idx_activity_user_timestamp',
        background: true
      }
    );

    // Index sur type - filtrage par type d'activit√©
    await activityCollection.createIndex(
      { type: 1 },
      { 
        name: 'idx_activity_type',
        background: true
      }
    );

    // Index compos√© - type + timestamp (flux global par type)
    await activityCollection.createIndex(
      { type: 1, createdAt: -1 },
      { 
        name: 'idx_activity_type_timestamp',
        background: true
      }
    );

    this.logger.log('‚úÖ Indexes ActivityFeed cr√©√©s');
  }

  /**
   * üîê Ajouter les indexes pour la collection RefreshTokens
   */
  private async addRefreshTokenIndexes(): Promise<void> {
    this.logger.log('üîê Ajout des indexes RefreshTokens...');
    const tokenCollection = this.connection.collection('refreshtokens');

    // Index sur token - recherche rapide du token
    await tokenCollection.createIndex(
      { token: 1 },
      { 
        unique: true,
        name: 'idx_refresh_tokens_token_unique',
        background: true
      }
    );

    // Index sur user - tokens par utilisateur
    await tokenCollection.createIndex(
      { user: 1 },
      { 
        name: 'idx_refresh_tokens_user',
        background: true
      }
    );

    // Index TTL sur expiresAt - nettoyage automatique
    await tokenCollection.createIndex(
      { expiresAt: 1 },
      { 
        name: 'idx_refresh_tokens_ttl',
        expireAfterSeconds: 0,
        background: true
      }
    );

    this.logger.log('‚úÖ Indexes RefreshTokens cr√©√©s');
  }

  /**
   * üìä Afficher les statistiques des indexes cr√©√©s
   */
  private async showIndexStats(): Promise<void> {
    this.logger.log('üìä Statistiques des indexes:');

    const collections = ['users', 'words', 'communities', 'messages', 'activityfeeds', 'refreshtokens'];
    
    for (const collectionName of collections) {
      try {
        const collection = this.connection.collection(collectionName);
        const indexes = await collection.indexes();
        this.logger.log(`   ${collectionName}: ${indexes.length} indexes`);
      } catch (error) {
        this.logger.warn(`   ${collectionName}: Collection non trouv√©e`);
      }
    }
  }

  /**
   * üîÑ Rollback - Supprime tous les indexes cr√©√©s (sauf les indexes syst√®me)
   */
  async down(): Promise<void> {
    this.logger.log('üîÑ Rollback - Suppression des indexes cr√©√©s');

    const indexesToDrop = [
      // Users
      { collection: 'users', indexes: ['idx_users_email_unique', 'idx_users_username_unique', 'idx_users_role', 'idx_users_email_verified', 'idx_users_email_verification'] },
      
      // Words
      { collection: 'words', indexes: ['idx_words_word_text', 'idx_words_status', 'idx_words_language', 'idx_words_category', 'idx_words_contributor', 'idx_words_status_language', 'idx_words_language_category', 'idx_words_status_language_category', 'idx_words_fulltext_search', 'idx_words_created_desc', 'idx_words_featured_status', 'idx_words_category_creator'] },
      
      // Communities
      { collection: 'communities', indexes: ['idx_communities_language', 'idx_communities_name', 'idx_communities_creator', 'idx_communities_members_desc'] },
      
      // Messages
      { collection: 'messages', indexes: ['idx_messages_conversation_timestamp', 'idx_messages_sender', 'idx_messages_read_by'] },
      
      // ActivityFeed
      { collection: 'activityfeeds', indexes: ['idx_activity_user_timestamp', 'idx_activity_type', 'idx_activity_type_timestamp'] },
      
      // RefreshTokens
      { collection: 'refreshtokens', indexes: ['idx_refresh_tokens_token_unique', 'idx_refresh_tokens_user', 'idx_refresh_tokens_ttl'] }
    ];

    for (const { collection, indexes } of indexesToDrop) {
      for (const indexName of indexes) {
        try {
          await this.connection.collection(collection).dropIndex(indexName);
          this.logger.log(`‚úÖ Index supprim√©: ${collection}.${indexName}`);
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è Impossible de supprimer: ${collection}.${indexName} - ${error.message}`);
        }
      }
    }

    this.logger.log('üîÑ Rollback termin√©');
  }
}