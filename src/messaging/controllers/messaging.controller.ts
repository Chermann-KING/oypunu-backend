/**
 * @fileoverview Contr√¥leur REST de messagerie basique pour O'Ypunu
 * 
 * Ce contr√¥leur fournit une API REST de compatibilit√© pour la messagerie
 * tout en utilisant le service Enhanced en arri√®re-plan. Il maintient
 * la compatibilit√© ascendante pour les clients existants avec une
 * transition transparente vers les fonctionnalit√©s avanc√©es.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import {
  Controller,
  Get,
  Post,
  Patch,
  Body,
  Query,
  Param,
  UseGuards,
  Request,
  HttpStatus,
  HttpCode,
} from "@nestjs/common";
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
} from "@nestjs/swagger";
import { MessagingService } from "../services/messaging.service";
import { MessagingEnhancedService } from "../services/messaging-enhanced.service";
import { SendMessageDto } from "../dto/send-message.dto";
import { GetMessagesDto } from "../dto/get-messages.dto";
import { JwtAuthGuard } from "../../auth/guards/jwt-auth.guard";

/**
 * Interface pour les requ√™tes authentifi√©es avec donn√©es utilisateur JWT
 * 
 * @interface AuthenticatedRequest
 * @extends Request
 * @property {Object} user - Donn√©es utilisateur extraites du token JWT
 * @property {string} user.userId - ID unique de l'utilisateur
 * @property {string} user.username - Nom d'utilisateur
 * @property {string} user.email - Email de l'utilisateur
 */
interface AuthenticatedRequest extends Request {
  user: {
    userId: string;
    username: string;
    email: string;
  };
}

/**
 * Contr√¥leur REST de messagerie de compatibilit√© O'Ypunu
 * 
 * Ce contr√¥leur maintient l'API REST existante pour la messagerie
 * tout en utilisant le service Enhanced pour b√©n√©ficier des
 * fonctionnalit√©s avanc√©es. Il assure une transition en douceur :
 * 
 * ## Fonctionnalit√©s de compatibilit√© :
 * 
 * ### üì° API REST standard
 * - Endpoints familiers pour clients existants
 * - Authentification JWT obligatoire sur tous les endpoints
 * - Documentation Swagger compl√®te et coh√©rente
 * - Codes de statut HTTP standards et descriptifs
 * 
 * ### üîÑ Migration transparente
 * - Utilise MessagingEnhancedService en arri√®re-plan
 * - Maintient les interfaces existantes intactes
 * - Format de r√©ponse uniforme avec structure success/data
 * - Gestion d'erreurs harmonis√©e
 * 
 * ### üõ°Ô∏è S√©curit√© int√©gr√©e
 * - JwtAuthGuard sur tous les endpoints
 * - Validation des permissions automatique
 * - Extraction s√©curis√©e des donn√©es utilisateur
 * - Protection contre l'acc√®s non autoris√©
 * 
 * @class MessagingController
 * @version 1.0.0
 */
@ApiTags("messaging")
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@Controller("messaging")
export class MessagingController {
  /**
   * Constructeur avec injection des services
   * 
   * @constructor
   * @param {MessagingService} messagingService - Service basique (compatibilit√©)
   * @param {MessagingEnhancedService} messagingEnhancedService - Service avanc√© utilis√©
   */
  constructor(
    private readonly messagingService: MessagingService,
    private readonly messagingEnhancedService: MessagingEnhancedService
  ) {}

  /**
   * Envoie un message priv√© via API REST
   * 
   * Endpoint de compatibilit√© pour l'envoi de messages qui utilise
   * le service Enhanced tout en maintenant l'interface famili√®re.
   * Valide automatiquement l'authentification et les permissions.
   * 
   * @async
   * @method sendMessage
   * @param {AuthenticatedRequest} req - Requ√™te avec utilisateur authentifi√©
   * @param {SendMessageDto} sendMessageDto - Donn√©es valid√©es du message
   * @returns {Promise<Object>} R√©ponse avec success/data structure
   * 
   * @example
   * ```bash
   * POST /messaging/send
   * Authorization: Bearer <jwt-token>
   * Content-Type: application/json
   * 
   * {
   *   "receiverId": "user-id-456",
   *   "content": "Salut! Comment √ßa va?",
   *   "messageType": "text"
   * }
   * ```
   */
  @Post("send")
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ summary: "Envoyer un message" })
  @ApiResponse({ status: 201, description: "Message envoy√© avec succ√®s" })
  @ApiResponse({ status: 400, description: "Donn√©es invalides" })
  @ApiResponse({ status: 404, description: "Destinataire introuvable" })
  async sendMessage(
    @Request() req: AuthenticatedRequest,
    @Body() sendMessageDto: SendMessageDto
  ) {
    // üöÄ Utilise le nouveau service Enhanced en maintenant la compatibilit√©
    const result = await this.messagingEnhancedService.sendSimpleMessage(
      req.user.userId,
      sendMessageDto.receiverId,
      sendMessageDto.content
    );
    return {
      success: true,
      message: "Message envoy√© avec succ√®s",
      data: result.data,
    };
  }

  @Get("conversations")
  @ApiOperation({ summary: "R√©cup√©rer les conversations de l'utilisateur" })
  @ApiResponse({
    status: 200,
    description: "Conversations r√©cup√©r√©es avec succ√®s",
  })
  async getUserConversations(@Request() req: AuthenticatedRequest) {
    // üöÄ Utilise le nouveau service Enhanced
    const result = await this.messagingEnhancedService.getUserConversations(
      req.user.userId
    );
    return {
      success: true,
      data: result.conversations,
    };
  }

  @Get("messages")
  @ApiOperation({ summary: "R√©cup√©rer les messages d'une conversation" })
  @ApiResponse({ status: 200, description: "Messages r√©cup√©r√©s avec succ√®s" })
  @ApiResponse({ status: 400, description: "ID de conversation requis" })
  @ApiResponse({
    status: 403,
    description: "Acc√®s interdit √† cette conversation",
  })
  @ApiResponse({ status: 404, description: "Conversation introuvable" })
  async getMessages(
    @Request() req: AuthenticatedRequest,
    @Query() getMessagesDto: GetMessagesDto
  ) {
    // üöÄ Utilise le nouveau service Enhanced
    const result = await this.messagingEnhancedService.getConversationMessages(
      req.user.userId,
      getMessagesDto.conversationId,
      getMessagesDto.page,
      getMessagesDto.limit
    );
    return {
      success: true,
      data: result,
    };
  }

  @Patch("conversations/:conversationId/read")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: "Marquer les messages d'une conversation comme lus",
  })
  @ApiResponse({ status: 200, description: "Messages marqu√©s comme lus" })
  @ApiResponse({
    status: 403,
    description: "Acc√®s interdit √† cette conversation",
  })
  @ApiResponse({ status: 404, description: "Conversation introuvable" })
  async markMessagesAsRead(
    @Request() req: AuthenticatedRequest,
    @Param("conversationId") conversationId: string
  ) {
    // üöÄ Utilise le nouveau service Enhanced
    const result = await this.messagingEnhancedService.markMessagesAsRead(
      req.user.userId,
      conversationId
    );
    return {
      success: true,
      message: `${result.modifiedCount} message(s) marqu√©(s) comme lu(s)`,
      data: result,
    };
  }

  @Get("unread-count")
  @ApiOperation({ summary: "R√©cup√©rer le nombre de messages non lus" })
  @ApiResponse({
    status: 200,
    description: "Nombre de messages non lus r√©cup√©r√©",
  })
  async getUnreadMessagesCount(@Request() req: AuthenticatedRequest) {
    // üöÄ Utilise le nouveau service Enhanced
    const count = await this.messagingEnhancedService.getUnreadMessagesCount(
      req.user.userId
    );
    return {
      success: true,
      data: { count },
    };
  }
}
