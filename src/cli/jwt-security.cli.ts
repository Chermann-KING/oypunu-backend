#!/usr/bin/env node

/**
 * @fileoverview CLI de s√©curit√© JWT pour O'Ypunu
 * 
 * Outil en ligne de commande professionnel pour la gestion avanc√©e
 * de la s√©curit√© des secrets JWT. Inclut validation cryptographique,
 * g√©n√©ration s√©curis√©e, audit complet et v√©rification de configuration
 * avec scoring d√©taill√© et recommandations de s√©curit√©.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 * 
 * ## Usage:
 * ```bash
 * npm run jwt:validate "secret"  # Valider un secret JWT
 * npm run jwt:generate [length]  # G√©n√©rer un secret s√©curis√©
 * npm run jwt:audit              # Auditer le secret actuel
 * npm run jwt:check              # V√©rifier la configuration
 * ```
 * 
 * ## Variables d'environnement:
 * - `JWT_SECRET` - Secret JWT √† auditer (optionnel pour g√©n√©ration)
 * - `NODE_ENV` - Environnement d'ex√©cution pour debug
 */

import { NestFactory } from '@nestjs/core';
import { Logger } from '@nestjs/common';
import { AppModule } from '../app.module';
import { JwtSecretValidatorService } from '../auth/security/jwt-secret-validator.service';

/**
 * Fonction principale d'initialisation du CLI de s√©curit√© JWT
 * 
 * Cette fonction initialise l'application NestJS, analyse les arguments
 * de ligne de commande et ex√©cute l'op√©ration de s√©curit√© demand√©e
 * avec gestion d'erreurs et nettoyage des ressources.
 * 
 * @async
 * @function bootstrap
 * @throws {Error} En cas d'√©chec de validation ou configuration invalide
 */
async function bootstrap() {
  const logger = new Logger('JWTSecurityCLI');
  
  // Cr√©er l'application NestJS en mode silencieux
  const app = await NestFactory.create(AppModule, {
    logger: false,
  });

  const jwtValidator = app.get(JwtSecretValidatorService);
  const command = process.argv[2];
  const argument = process.argv[3];

  try {
    switch (command) {
      case 'validate':
      case '--validate':
        await validateSecret(jwtValidator, argument, logger);
        break;

      case 'generate':
      case '--generate':
        await generateSecret(jwtValidator, argument, logger);
        break;

      case 'audit':
      case '--audit':
        await auditCurrentSecret(jwtValidator, logger);
        break;

      case 'check':
      case '--check':
        await checkConfiguration(logger);
        break;

      default:
        showUsage(logger);
        process.exit(1);
    }
  } catch (error) {
    logger.error('‚ùå Erreur:', error.message);
    if (process.env.NODE_ENV === 'development') {
      console.error(error.stack);
    }
    process.exit(1);
  } finally {
    await app.close();
  }
}

/**
 * Valide un secret JWT avec analyse cryptographique compl√®te
 * 
 * Cette fonction effectue une validation d√©taill√©e d'un secret JWT
 * incluant v√©rification de longueur, entropie, complexit√© et
 * conformit√© aux standards de s√©curit√© avec affichage format√©.
 * 
 * @async
 * @function validateSecret
 * @param {JwtSecretValidatorService} validator - Service de validation JWT
 * @param {string} secret - Secret JWT √† valider
 * @param {Logger} logger - Logger pour affichage des messages
 * @returns {Promise<void>}
 */
async function validateSecret(
  validator: JwtSecretValidatorService, 
  secret: string, 
  logger: Logger
): Promise<void> {
  if (!secret) {
    logger.error('‚ùå Secret JWT requis pour validation');
    logger.log('üí° Usage: npm run jwt:validate "votre-secret-jwt"');
    return;
  }

  logger.log('üîç Validation du secret JWT...');
  const result = validator.validateJwtSecret(secret);

  // Afficher les r√©sultats
  console.log('\nüìä R√âSULTATS DE VALIDATION:');
  console.log('‚ïê'.repeat(50));
  
  console.log(`‚ú® Statut: ${result.isValid ? '‚úÖ VALIDE' : '‚ùå INVALIDE'}`);
  console.log(`üí™ Force: ${getStrengthEmoji(result.strength)} ${result.strength.toUpperCase()}`);  console.log(`üé≤ Entropie: ${result.entropy.toFixed(2)} bits/caract√®re`);

  if (result.errors.length > 0) {
    console.log('\nüö® ERREURS:');
    result.errors.forEach(error => console.log(`  ‚ùå ${error}`));
  }

  if (result.warnings.length > 0) {
    console.log('\n‚ö†Ô∏è  AVERTISSEMENTS:');
    result.warnings.forEach(warning => console.log(`  ‚ö†Ô∏è  ${warning}`));
  }

  if (result.recommendations.length > 0) {
    console.log('\nüí° RECOMMANDATIONS:');
    result.recommendations.forEach(rec => console.log(`  ${rec}`));
  }

  console.log('‚ïê'.repeat(50));
}

/**
 * G√©n√®re un nouveau secret JWT cryptographiquement s√©curis√©
 * 
 * Cette fonction cr√©e un secret JWT al√©atoire s√©curis√© avec la longueur
 * sp√©cifi√©e, le valide automatiquement et fournit des exemples
 * de configuration pour diff√©rents environnements de d√©ploiement.
 * 
 * @async
 * @function generateSecret
 * @param {JwtSecretValidatorService} validator - Service de validation JWT
 * @param {string} lengthStr - Longueur d√©sir√©e du secret (string)
 * @param {Logger} logger - Logger pour affichage des messages
 * @returns {Promise<void>}
 */
async function generateSecret(
  validator: JwtSecretValidatorService,
  lengthStr: string,
  logger: Logger
): Promise<void> {
  const length = lengthStr ? parseInt(lengthStr, 10) : 64;

  if (isNaN(length) || length < 32 || length > 128) {
    logger.error('‚ùå Longueur invalide. Doit √™tre entre 32 et 128 caract√®res.');
    return;
  }

  logger.log(`üé≤ G√©n√©ration d'un secret JWT s√©curis√© (${length} caract√®res)...`);
  
  const secret = validator.generateSecureSecret(length);
  const validation = validator.validateJwtSecret(secret);

  console.log('\nüîê NOUVEAU SECRET JWT G√âN√âR√â:');
  console.log('‚ïê'.repeat(80));
  console.log(`Secret: ${secret}`);
  console.log('‚ïê'.repeat(80));

  console.log('\nüìä VALIDATION DU SECRET G√âN√âR√â:');
  console.log(`‚ú® Force: ${getStrengthEmoji(validation.strength)} ${validation.strength.toUpperCase()}`);  console.log(`üé≤ Entropie: ${validation.entropy.toFixed(2)} bits/caract√®re`);

  console.log('\nüõ†Ô∏è  CONFIGURATION:');
  console.log('Environmental variable:');
  console.log(`  JWT_SECRET=${secret}`);
  console.log('\nDocker Compose:');
  console.log(`  environment:`);
  console.log(`    - JWT_SECRET=${secret}`);
  console.log('\nKubernetes Secret:');
  console.log(`  data:`);
  console.log(`    JWT_SECRET: "${secret}"`);

  console.log('\n‚ö†Ô∏è  IMPORTANT:');
  console.log('‚Ä¢ Stockez ce secret de mani√®re s√©curis√©e');
  console.log('‚Ä¢ Ne le partagez jamais dans le code source');
  console.log('‚Ä¢ Impl√©mentez une rotation r√©guli√®re');
  console.log('‚Ä¢ Sauvegardez-le dans un gestionnaire de secrets');
}

/**
 * Audite le secret JWT actuellement configur√© dans l'environnement
 * 
 * Cette fonction analyse le secret JWT d√©fini dans JWT_SECRET,
 * √©value sa s√©curit√©, identifie les vuln√©rabilit√©s potentielles
 * et fournit des recommandations d'am√©lioration.
 * 
 * @async
 * @function auditCurrentSecret
 * @param {JwtSecretValidatorService} validator - Service de validation JWT
 * @param {Logger} logger - Logger pour affichage des messages
 * @returns {Promise<void>}
 */
async function auditCurrentSecret(
  validator: JwtSecretValidatorService,
  logger: Logger
): Promise<void> {
  logger.log('üîç Audit du secret JWT actuel...');

  const jwtSecret = process.env.JWT_SECRET;

  if (!jwtSecret) {
    console.log('\nüö® CONFIGURATION MANQUANTE:');
    console.log('‚ïê'.repeat(50));
    console.log('‚ùå JWT_SECRET n\'est pas configur√©');
    console.log('\nüí° ACTIONS REQUISES:');
    console.log('‚Ä¢ Configurer JWT_SECRET dans les variables d\'environnement');
    console.log('‚Ä¢ G√©n√©rer un secret s√©curis√©: npm run jwt:generate');
    console.log('‚Ä¢ Red√©marrer l\'application');
    return;
  }

  const validation = validator.validateJwtSecret(jwtSecret);

  console.log('\nüîç AUDIT DU SECRET JWT ACTUEL:');
  console.log('‚ïê'.repeat(50));
  console.log(`‚ú® Statut: ${validation.isValid ? '‚úÖ VALIDE' : '‚ùå INVALIDE'}`);
  console.log(`üí™ Force: ${getStrengthEmoji(validation.strength)} ${validation.strength.toUpperCase()}`);  console.log(`üé≤ Entropie: ${validation.entropy.toFixed(2)} bits/caract√®re`);
  console.log(`üìè Longueur: ${jwtSecret.length} caract√®res`);

  if (validation.errors.length > 0) {
    console.log('\nüö® PROBL√àMES CRITIQUES:');
    validation.errors.forEach(error => console.log(`  ‚ùå ${error}`));
  }

  if (validation.warnings.length > 0) {
    console.log('\n‚ö†Ô∏è  AVERTISSEMENTS:');
    validation.warnings.forEach(warning => console.log(`  ‚ö†Ô∏è  ${warning}`));
  }

  if (validation.recommendations.length > 0) {
    console.log('\nüí° RECOMMANDATIONS:');
    validation.recommendations.forEach(rec => console.log(`  ${rec}`));
  }

  // Recommandations bas√©es sur le score
  if (validation.score < 60) {
    console.log('\nüîÑ ACTION RECOMMAND√âE:');
    console.log('  G√©n√©rer un nouveau secret: npm run jwt:generate');
  }

  console.log('‚ïê'.repeat(50));
}

/**
 * ‚úÖ V√©rifie la configuration g√©n√©rale
 */
async function checkConfiguration(logger: Logger): Promise<void> {
  logger.log('üîç V√©rification de la configuration JWT...');

  const jwtSecret = process.env.JWT_SECRET;
  const nodeEnv = process.env.NODE_ENV;

  console.log('\nüõ†Ô∏è  CONFIGURATION ENVIRONMENT:');
  console.log('‚ïê'.repeat(50));
  console.log(`üåç NODE_ENV: ${nodeEnv || 'non d√©fini'}`);
  console.log(`üîê JWT_SECRET: ${jwtSecret ? '‚úÖ Configur√©' : '‚ùå Manquant'}`);

  if (jwtSecret) {
    console.log(`üìè Longueur: ${jwtSecret.length} caract√®res`);
    
    // Test rapide sans r√©v√©ler le secret
    const isWeak = jwtSecret === 'secret' || jwtSecret === 'your-256-bit-secret';
    if (isWeak) {
      console.log('‚ö†Ô∏è  WARNING: Secret faible d√©tect√©');
    }
  }

  console.log('\nüîß OUTILS DISPONIBLES:');
  console.log('‚Ä¢ npm run jwt:validate "secret" - Valider un secret');
  console.log('‚Ä¢ npm run jwt:generate 64      - G√©n√©rer un secret');
  console.log('‚Ä¢ npm run jwt:audit            - Auditer le secret actuel');

  console.log('‚ïê'.repeat(50));
}

/**
 * üìñ Affiche l'aide d'utilisation
 */
function showUsage(logger: Logger): void {
  logger.log('üìñ JWT Security CLI - Outil de gestion s√©curit√© JWT');
  console.log('\nüõ†Ô∏è  COMMANDES DISPONIBLES:');
  console.log('');
  console.log('  npm run jwt:validate "secret"  - Valider un secret JWT');
  console.log('  npm run jwt:generate [length]  - G√©n√©rer un secret s√©curis√©');
  console.log('  npm run jwt:audit              - Auditer le secret actuel');
  console.log('  npm run jwt:check              - V√©rifier la configuration');
  console.log('');  console.log('  npm run jwt:validate "MySecretKey123"');
  console.log('  npm run jwt:generate 64');
  console.log('  npm run jwt:audit');
  console.log('');
  console.log('üîí S√âCURIT√â:');
  console.log('  ‚Ä¢ Longueur minimum: 32 caract√®res');
  console.log('  ‚Ä¢ Entropie minimum: 3.0 bits/caract√®re');
  console.log('  ‚Ä¢ Complexit√© requise: majuscules, minuscules, chiffres, symboles');
  console.log('  ‚Ä¢ √âviter les secrets faibles/communs');
}

/**
 * üé® Retourne l'emoji correspondant √† la force du secret
 */
function getStrengthEmoji(strength: string): string {
  switch (strength) {
    case 'excellent': return 'üü¢';
    case 'good': return 'üü°';
    case 'medium': return 'üü†';
    case 'weak': return 'üî¥';
    default: return '‚ö™';
  }
}

// G√©rer les interruptions proprement
process.on('SIGINT', () => {
  console.log('\n‚ö†Ô∏è Commande interrompue par l\'utilisateur');
  process.exit(1);
});

process.on('SIGTERM', () => {
  console.log('\n‚ö†Ô∏è Commande interrompue par le syst√®me');
  process.exit(1);
});

bootstrap();