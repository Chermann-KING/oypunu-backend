/**
 * @fileoverview Service principal d'administration pour O'Ypunu
 *
 * Ce service centralise toute la logique m√©tier d'administration, incluant:
 * - G√©n√©ration de statistiques et m√©triques globales
 * - Gestion des utilisateurs (suspension, changement de r√¥le)
 * - Mod√©ration de contenu (mots, communaut√©s)
 * - Outils de surveillance et d'audit
 * - Contr√¥le d'acc√®s bas√© sur les r√¥les utilisateur
 *
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import {
  Injectable,
  ForbiddenException,
  NotFoundException,
} from "@nestjs/common";
import { InjectModel } from "@nestjs/mongoose";
import { Model } from "mongoose";
import { User, UserDocument, UserRole } from "../../users/schemas/user.schema";
import { Word, WordDocument } from "../../dictionary/schemas/word.schema";
import {
  Community,
  CommunityDocument,
} from "../../communities/schemas/community.schema";
import {
  CommunityMember,
  CommunityMemberDocument,
} from "../../communities/schemas/community-member.schema";
import {
  CommunityPost,
  CommunityPostDocument,
} from "../../communities/schemas/community-post.schema";
import {
  Message,
  MessageDocument,
} from "../../messaging/schemas/message.schema";

/**
 * Interface pour les statistiques globales de l'administration
 *
 * @interface AdminStats
 */
export interface AdminStats {
  /** Nombre total d'utilisateurs inscrits */
  totalUsers: number;
  /** Nombre d'utilisateurs actifs (connexion r√©cente) */
  activeUsers: number;
  /** Nombre d'utilisateurs suspendus */
  suspendedUsers: number;
  /** Nombre total de mots dans le dictionnaire */
  totalWords: number;
  /** Nombre de mots en attente de mod√©ration */
  pendingWords: number;
  /** Nombre de mots approuv√©s */
  approvedWords: number;
  /** Nombre de mots rejet√©s */
  rejectedWords: number;
  /** Nombre total de communaut√©s */
  totalCommunities: number;
  /** Nombre de communaut√©s actives */
  activeCommunities: number;
  /** Nombre total de posts de communaut√© */
  totalPosts: number;
  /** Nombre total de messages √©chang√©s */
  totalMessages: number;
  /** Nouveaux utilisateurs ce mois-ci */
  newUsersThisMonth: number;
  /** Nouveaux mots cette semaine */
  newWordsThisWeek: number;
}

/**
 * Interface pour les donn√©es de gestion d'utilisateurs pagin√©es
 *
 * @interface UserManagementData
 */
export interface UserManagementData {
  /** Liste des utilisateurs pour la page courante */
  users: User[];
  /** Nombre total d'utilisateurs (tous filtres confondus) */
  total: number;
  /** Num√©ro de page courante */
  page: number;
  /** Nombre d'√©l√©ments par page */
  limit: number;
  /** Nombre total de pages */
  totalPages: number;
}

// Interfaces pour les filtres MongoDB
interface UserFilter {
  role?: UserRole;
  isSuspended?: boolean;
  $or?: Array<{
    username?: { $regex: string; $options: string };
    email?: { $regex: string; $options: string };
  }>;
}

interface WordFilter {
  status: string;
  language?: string;
}

interface CommunityFilter {
  memberCount?: { $gt?: number; $lte?: number };
}

/**
 * Service principal d'administration pour O'Ypunu
 *
 * Ce service fournit tous les outils d'administration n√©cessaires pour g√©rer
 * efficacement la plateforme O'Ypunu. Il inclut des fonctionnalit√©s avanc√©es
 * de gestion des utilisateurs, mod√©ration de contenu, g√©n√©ration de statistiques
 * et contr√¥le d'acc√®s granulaire bas√© sur les r√¥les.
 *
 * ## Fonctionnalit√©s principales :
 *
 * ### üìä Statistiques et m√©triques
 * - Dashboard avec KPIs en temps r√©el
 * - M√©triques d'engagement et croissance
 * - Rapports personnalis√©s par p√©riode
 *
 * ### üë• Gestion des utilisateurs
 * - Liste et recherche avanc√©e d'utilisateurs
 * - Suspension/r√©activation de comptes
 * - Modification des r√¥les (hi√©rarchie respect√©e)
 * - Audit des actions utilisateur
 *
 * ### üìù Mod√©ration de contenu
 * - Approbation/rejet de mots
 * - Gestion des communaut√©s
 * - Surveillance des activit√©s suspectes
 *
 * ### üîí Contr√¥le d'acc√®s
 * - V√©rification automatique des permissions
 * - Hi√©rarchie des r√¥les : USER < CONTRIBUTOR < ADMIN < SUPERADMIN
 * - Actions audit√©es et tra√ßables
 *
 * @class AdminService
 * @version 1.0.0
 */
@Injectable()
export class AdminService {
  /**
   * Constructeur du service d'administration
   *
   * @constructor
   * @param {Model<UserDocument>} userModel - Mod√®le Mongoose des utilisateurs
   * @param {Model<WordDocument>} wordModel - Mod√®le Mongoose des mots
   * @param {Model<CommunityDocument>} communityModel - Mod√®le Mongoose des communaut√©s
   * @param {Model<CommunityMemberDocument>} memberModel - Mod√®le Mongoose des membres de communaut√©
   * @param {Model<CommunityPostDocument>} postModel - Mod√®le Mongoose des posts de communaut√©
   * @param {Model<MessageDocument>} messageModel - Mod√®le Mongoose des messages
   *
   * @example
   * ```typescript
   * // Le constructeur est utilis√© automatiquement par NestJS
   * // Exemple d'injection dans un contr√¥leur :
   * constructor(private adminService: AdminService) {}
   * ```
   *
   * @since 1.0.0
   * @memberof AdminService
   */
  constructor(
    @InjectModel(User.name) private readonly userModel: Model<UserDocument>,
    @InjectModel(Word.name) private readonly wordModel: Model<WordDocument>,
    @InjectModel(Community.name)
    private readonly communityModel: Model<CommunityDocument>,
    @InjectModel(CommunityMember.name)
    private readonly memberModel: Model<CommunityMemberDocument>,
    @InjectModel(CommunityPost.name)
    private readonly postModel: Model<CommunityPostDocument>,
    @InjectModel(Message.name)
    private readonly messageModel: Model<MessageDocument>
  ) {}

  /**
   * V√©rifie les permissions d'acc√®s selon la hi√©rarchie des r√¥les
   *
   * Cette m√©thode priv√©e valide que l'utilisateur poss√®de les permissions
   * suffisantes pour ex√©cuter une action administrative. Elle utilise
   * une hi√©rarchie num√©rique stricte des r√¥les.
   *
   * @private
   * @method checkPermission
   * @param {UserRole} userRole - R√¥le de l'utilisateur effectuant l'action
   * @param {UserRole} requiredRole - R√¥le minimum requis pour l'action
   * @throws {ForbiddenException} Si permissions insuffisantes
   *
   * @example
   * ```typescript
   * // V√©rifier qu'un utilisateur est au moins admin
   * this.checkPermission(UserRole.CONTRIBUTOR, UserRole.ADMIN); // L√®ve une exception
   * this.checkPermission(UserRole.ADMIN, UserRole.ADMIN); // OK
   * this.checkPermission(UserRole.SUPERADMIN, UserRole.ADMIN); // OK
   * ```
   */
  private checkPermission(userRole: UserRole, requiredRole: UserRole): void {
    const roleHierarchy = {
      [UserRole.USER]: 0,
      [UserRole.CONTRIBUTOR]: 1,
      [UserRole.ADMIN]: 2,
      [UserRole.SUPERADMIN]: 3,
    };

    if (roleHierarchy[userRole] < roleHierarchy[requiredRole]) {
      throw new ForbiddenException("Permissions insuffisantes");
    }
  }

  /**
   * G√©n√®re les statistiques compl√®tes du tableau de bord administrateur
   *
   * Cette m√©thode calcule en temps r√©el toutes les m√©triques principales
   * de la plateforme O'Ypunu en interrogeant les diff√©rentes collections.
   * Les donn√©es sont optimis√©es pour l'affichage dans les dashboards.
   *
   * @async
   * @method getDashboardStats
   * @param {UserRole} userRole - R√¥le de l'utilisateur demandant les stats
   * @returns {Promise<AdminStats>} Statistiques compl√®tes de la plateforme
   * @throws {ForbiddenException} Si r√¥le insuffisant (minimum CONTRIBUTOR)
   *
   * @example
   * ```typescript
   * // R√©cup√©rer les stats pour un admin
   * const stats = await adminService.getDashboardStats(UserRole.ADMIN);
   * console.log(`Utilisateurs actifs: ${stats.activeUsers}`);
   * console.log(`Mots en attente: ${stats.pendingWords}`);
   *
   * // R√©ponse typique:
   * {
   *   totalUsers: 1247,
   *   activeUsers: 856,
   *   pendingWords: 23,
   *   approvedWords: 1456,
   *   newUsersThisMonth: 45
   * }
   * ```
   */
  async getDashboardStats(userRole: UserRole): Promise<AdminStats> {
    this.checkPermission(userRole, UserRole.CONTRIBUTOR);

    const now = new Date();
    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
    const weekStart = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

    const [
      totalUsers,
      activeUsers,
      suspendedUsers,
      totalWords,
      pendingWords,
      approvedWords,
      rejectedWords,
      totalCommunities,
      activeCommunities,
      totalPosts,
      totalMessages,
      newUsersThisMonth,
      newWordsThisWeek,
    ] = await Promise.all([
      this.userModel.countDocuments({}),
      this.userModel.countDocuments({ isActive: true }),
      this.userModel.countDocuments({ isSuspended: true }),
      this.wordModel.countDocuments({}),
      this.wordModel.countDocuments({ status: "pending" }),
      this.wordModel.countDocuments({ status: "approved" }),
      this.wordModel.countDocuments({ status: "rejected" }),
      this.communityModel.countDocuments({}),
      this.communityModel.countDocuments({ memberCount: { $gt: 1 } }),
      this.postModel.countDocuments({}),
      this.messageModel.countDocuments({}),
      this.userModel.countDocuments({ createdAt: { $gte: monthStart } }),
      this.wordModel.countDocuments({ createdAt: { $gte: weekStart } }),
    ]);

    return {
      totalUsers,
      activeUsers,
      suspendedUsers,
      totalWords,
      pendingWords,
      approvedWords,
      rejectedWords,
      totalCommunities,
      activeCommunities,
      totalPosts,
      totalMessages,
      newUsersThisMonth,
      newWordsThisWeek,
    };
  }

  /**
   * R√©cup√®re la liste des utilisateurs avec pagination et filtres avanc√©s
   *
   * Cette m√©thode permet aux administrateurs de g√©rer efficacement les utilisateurs
   * de la plateforme avec des options de filtrage par r√¥le, statut et recherche textuelle.
   * Les r√©sultats sont pagin√©s pour optimiser les performances et l'exp√©rience utilisateur.
   *
   * @async
   * @method getUsers
   * @param {number} page - Num√©ro de page (d√©faut: 1)
   * @param {number} limit - Nombre d'√©l√©ments par page (d√©faut: 20)
   * @param {UserRole} [role] - Filtrer par r√¥le utilisateur sp√©cifique
   * @param {"active" | "suspended" | "all"} [status] - Filtrer par statut de compte
   * @param {string} [search] - Terme de recherche (username ou email)
   * @param {UserRole} [userRole] - R√¥le de l'utilisateur effectuant la demande
   * @returns {Promise<UserManagementData>} Donn√©es pagin√©es des utilisateurs
   * @throws {ForbiddenException} Si r√¥le insuffisant (minimum ADMIN)
   *
   * @example
   * ```typescript
   * // R√©cup√©rer tous les utilisateurs suspendus
   * const suspendedUsers = await adminService.getUsers(
   *   1, 10, undefined, "suspended", undefined, UserRole.ADMIN
   * );
   *
   * // Rechercher des contributeurs par nom
   * const contributors = await adminService.getUsers(
   *   1, 20, UserRole.CONTRIBUTOR, "all", "john", UserRole.ADMIN
   * );
   *
   * // R√©ponse typique:
   * {
   *   users: [{ username: "john_doe", email: "john@example.com", ... }],
   *   total: 1247,
   *   page: 1,
   *   limit: 20,
   *   totalPages: 63
   * }
   * ```
   *
   * @since 1.0.0
   * @memberof AdminService
   */
  async getUsers(
    page = 1,
    limit = 20,
    role?: UserRole,
    status?: "active" | "suspended" | "all",
    search?: string,
    userRole?: UserRole
  ): Promise<UserManagementData> {
    this.checkPermission(userRole || UserRole.USER, UserRole.ADMIN);

    const filter: UserFilter = {};

    if (role) filter.role = role;

    if (status === "active") filter.isSuspended = false;
    else if (status === "suspended") filter.isSuspended = true;

    if (search) {
      filter.$or = [
        { username: { $regex: search, $options: "i" } },
        { email: { $regex: search, $options: "i" } },
      ];
    }

    const skip = (page - 1) * limit;
    const total = await this.userModel.countDocuments(filter);

    const users = await this.userModel
      .find(filter, { password: 0 }) // Exclure le mot de passe
      .skip(skip)
      .limit(limit)
      .sort({ createdAt: -1 })
      .exec();

    return {
      users,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
    };
  }

  /**
   * Suspend ou r√©active un compte utilisateur avec gestion avanc√©e
   *
   * Cette m√©thode permet aux administrateurs de suspendre temporairement ou
   * d√©finitivement un compte utilisateur, avec possibilit√© de sp√©cifier une
   * raison et une date d'expiration. Elle inclut des protections contre la
   * suspension abusive de comptes privil√©gi√©s.
   *
   * @async
   * @method toggleUserSuspension
   * @param {string} userId - Identifiant unique de l'utilisateur
   * @param {boolean} suspend - true pour suspendre, false pour lever la suspension
   * @param {string} [reason] - Raison de la suspension (recommand√©e)
   * @param {Date} [suspendUntil] - Date d'expiration de la suspension (optionnelle)
   * @param {UserRole} [userRole] - R√¥le de l'utilisateur effectuant l'action
   * @returns {Promise<{success: boolean; message: string}>} R√©sultat de l'op√©ration
   * @throws {ForbiddenException} Si r√¥le insuffisant ou tentative de suspension d'un superadmin
   * @throws {NotFoundException} Si l'utilisateur n'existe pas
   *
   * @example
   * ```typescript
   * // Suspendre un utilisateur pour 7 jours
   * const result = await adminService.toggleUserSuspension(
   *   "user123",
   *   true,
   *   "Violation des r√®gles de communaut√©",
   *   new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
   *   UserRole.ADMIN
   * );
   *
   * // Lever une suspension
   * const result = await adminService.toggleUserSuspension(
   *   "user123",
   *   false,
   *   undefined,
   *   undefined,
   *   UserRole.ADMIN
   * );
   *
   * // R√©ponse typique:
   * { success: true, message: "Utilisateur suspendu" }
   * ```
   *
   * @since 1.0.0
   * @memberof AdminService
   */
  async toggleUserSuspension(
    userId: string,
    suspend: boolean,
    reason?: string,
    suspendUntil?: Date,
    userRole?: UserRole
  ): Promise<{ success: boolean; message: string }> {
    this.checkPermission(userRole || UserRole.USER, UserRole.ADMIN);

    const user = await this.userModel.findById(userId);
    if (!user) {
      throw new NotFoundException("Utilisateur non trouv√©");
    }

    // Ne pas permettre de suspendre un superadmin
    if (user.role === UserRole.SUPERADMIN && userRole !== UserRole.SUPERADMIN) {
      throw new ForbiddenException("Impossible de suspendre un superadmin");
    }

    const updateData: any = {
      isSuspended: suspend,
      suspensionReason: suspend ? reason : undefined,
      suspendedUntil: suspend ? suspendUntil : undefined,
    };

    await this.userModel.findByIdAndUpdate(userId, updateData);

    return {
      success: true,
      message: suspend ? "Utilisateur suspendu" : "Suspension lev√©e",
    };
  }

  /**
   * Modifie le r√¥le d'un utilisateur avec contr√¥le hi√©rarchique strict
   *
   * Cette m√©thode permet aux superadministrateurs de modifier le r√¥le d'un utilisateur
   * tout en respectant la hi√©rarchie des permissions. Seuls les superadministrateurs
   * peuvent effectuer cette action critique pour maintenir la s√©curit√© de la plateforme.
   *
   * @async
   * @method changeUserRole
   * @param {string} userId - Identifiant unique de l'utilisateur √† modifier
   * @param {UserRole} newRole - Nouveau r√¥le √† attribuer √† l'utilisateur
   * @param {UserRole} [userRole] - R√¥le de l'utilisateur effectuant l'action
   * @returns {Promise<{success: boolean; message: string}>} R√©sultat de l'op√©ration
   * @throws {ForbiddenException} Si r√¥le insuffisant (seuls les SUPERADMIN peuvent changer les r√¥les)
   * @throws {NotFoundException} Si l'utilisateur n'existe pas
   *
   * @example
   * ```typescript
   * // Promouvoir un utilisateur au r√¥le de contributeur
   * const result = await adminService.changeUserRole(
   *   "user123",
   *   UserRole.CONTRIBUTOR,
   *   UserRole.SUPERADMIN
   * );
   *
   * // R√©trograder un admin vers utilisateur standard
   * const result = await adminService.changeUserRole(
   *   "admin456",
   *   UserRole.USER,
   *   UserRole.SUPERADMIN
   * );
   *
   * // R√©ponse typique:
   * { success: true, message: "R√¥le chang√© vers CONTRIBUTOR" }
   * ```
   *
   * @since 1.0.0
   * @memberof AdminService
   */
  async changeUserRole(
    userId: string,
    newRole: UserRole,
    userRole?: UserRole
  ): Promise<{ success: boolean; message: string }> {
    this.checkPermission(userRole || UserRole.USER, UserRole.SUPERADMIN);

    const user = await this.userModel.findById(userId);
    if (!user) {
      throw new NotFoundException("Utilisateur non trouv√©");
    }

    await this.userModel.findByIdAndUpdate(userId, { role: newRole });

    return {
      success: true,
      message: `R√¥le chang√© vers ${newRole}`,
    };
  }

  /**
   * R√©cup√®re la liste des mots en attente de mod√©ration avec pagination et filtres
   *
   * Cette m√©thode permet aux contributeurs et administrateurs de consulter efficacement
   * les mots soumis par la communaut√© qui n√©cessitent une validation. Elle inclut des
   * options de filtrage par langue et une pagination optimis√©e pour faciliter le travail
   * de mod√©ration.
   *
   * @async
   * @method getPendingWords
   * @param {number} page - Num√©ro de page (d√©faut: 1)
   * @param {number} limit - Nombre d'√©l√©ments par page (d√©faut: 20)
   * @param {string} [language] - Filtrer par langue sp√©cifique (ex: "yipunu", "fran√ßais")
   * @param {UserRole} [userRole] - R√¥le de l'utilisateur effectuant la demande
   * @returns {Promise<{words: Word[], total: number, page: number, limit: number, totalPages: number}>} Donn√©es pagin√©es des mots en attente
   * @throws {ForbiddenException} Si r√¥le insuffisant (minimum CONTRIBUTOR)
   *
   * @example
   * ```typescript
   * // R√©cup√©rer les mots en attente pour la langue yipunu
   * const pendingWords = await adminService.getPendingWords(
   *   1, 10, "yipunu", UserRole.CONTRIBUTOR
   * );
   *
   * // R√©cup√©rer tous les mots en attente
   * const allPending = await adminService.getPendingWords(
   *   1, 20, undefined, UserRole.ADMIN
   * );
   *
   * // R√©ponse typique:
   * {
   *   words: [{ word: "diboti", language: "yipunu", createdBy: {...}, ... }],
   *   total: 23,
   *   page: 1,
   *   limit: 20,
   *   totalPages: 2
   * }
   * ```
   *
   * @since 1.0.0
   * @memberof AdminService
   */
  async getPendingWords(
    page = 1,
    limit = 20,
    language?: string,
    userRole?: UserRole
  ) {
    this.checkPermission(userRole || UserRole.USER, UserRole.CONTRIBUTOR);

    const filter: WordFilter = { status: "pending" };
    if (language) filter.language = language;

    const skip = (page - 1) * limit;
    const total = await this.wordModel.countDocuments(filter);

    const words = await this.wordModel
      .find(filter)
      .skip(skip)
      .limit(limit)
      .populate("createdBy", "username email")
      .sort({ createdAt: -1 })
      .exec();

    return {
      words,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
    };
  }

  /**
   * Mod√®re un mot en l'approuvant ou le rejetant avec tra√ßabilit√© compl√®te
   *
   * Cette m√©thode permet aux contributeurs et administrateurs de valider ou refuser
   * les mots soumis par la communaut√©. Chaque d√©cision de mod√©ration est trac√©e
   * avec horodatage et raison optionnelle pour maintenir un audit transparent
   * du processus de validation du dictionnaire.
   *
   * @async
   * @method moderateWord
   * @param {string} wordId - Identifiant unique du mot √† mod√©rer
   * @param {"approve" | "reject"} action - Action de mod√©ration √† effectuer
   * @param {string} [reason] - Raison de la d√©cision (recommand√©e pour les rejets)
   * @param {UserRole} [userRole] - R√¥le de l'utilisateur effectuant la mod√©ration
   * @returns {Promise<{success: boolean; message: string}>} R√©sultat de l'op√©ration de mod√©ration
   * @throws {ForbiddenException} Si r√¥le insuffisant (minimum CONTRIBUTOR)
   * @throws {NotFoundException} Si le mot n'existe pas
   *
   * @example
   * ```typescript
   * // Approuver un mot valid√©
   * const result = await adminService.moderateWord(
   *   "word123",
   *   "approve",
   *   "D√©finition correcte et bien document√©e",
   *   UserRole.CONTRIBUTOR
   * );
   *
   * // Rejeter un mot probl√©matique
   * const result = await adminService.moderateWord(
   *   "word456",
   *   "reject",
   *   "D√©finition incompl√®te ou incorrecte",
   *   UserRole.ADMIN
   * );
   *
   * // R√©ponse typique:
   * { success: true, message: "Mot approuv√©" }
   * ```
   *
   * @since 1.0.0
   * @memberof AdminService
   */
  async moderateWord(
    wordId: string,
    action: "approve" | "reject",
    reason?: string,
    userRole?: UserRole
  ): Promise<{ success: boolean; message: string }> {
    this.checkPermission(userRole || UserRole.USER, UserRole.CONTRIBUTOR);

    const word = await this.wordModel.findById(wordId);
    if (!word) {
      throw new NotFoundException("Mot non trouv√©");
    }

    const status = action === "approve" ? "approved" : "rejected";
    await this.wordModel.findByIdAndUpdate(wordId, {
      status,
      moderationReason: reason,
      moderatedAt: new Date(),
    });

    return {
      success: true,
      message: action === "approve" ? "Mot approuv√©" : "Mot rejet√©",
    };
  }

  /**
   * R√©cup√®re la liste des communaut√©s avec pagination et filtres de mod√©ration
   *
   * Cette m√©thode permet aux administrateurs de superviser efficacement toutes les
   * communaut√©s de la plateforme avec des options de filtrage par statut d'activit√©.
   * Elle inclut les m√©tadonn√©es des cr√©ateurs et une pagination optimis√©e pour
   * faciliter la gestion des communaut√©s √† grande √©chelle.
   *
   * @async
   * @method getCommunities
   * @param {number} page - Num√©ro de page (d√©faut: 1)
   * @param {number} limit - Nombre d'√©l√©ments par page (d√©faut: 20)
   * @param {"active" | "inactive"} [status] - Filtrer par statut d'activit√© des communaut√©s
   * @param {UserRole} [userRole] - R√¥le de l'utilisateur effectuant la demande
   * @returns {Promise<{communities: Community[], total: number, page: number, limit: number, totalPages: number}>} Donn√©es pagin√©es des communaut√©s
   * @throws {ForbiddenException} Si r√¥le insuffisant (minimum ADMIN)
   *
   * @example
   * ```typescript
   * // R√©cup√©rer toutes les communaut√©s actives
   * const activeCommunities = await adminService.getCommunities(
   *   1, 10, "active", UserRole.ADMIN
   * );
   *
   * // R√©cup√©rer les communaut√©s inactives pour nettoyage
   * const inactiveCommunities = await adminService.getCommunities(
   *   1, 20, "inactive", UserRole.ADMIN
   * );
   *
   * // R√©ponse typique:
   * {
   *   communities: [{ name: "Apprenons Yipunu", language: "yipunu", memberCount: 45, ... }],
   *   total: 127,
   *   page: 1,
   *   limit: 20,
   *   totalPages: 7
   * }
   * ```
   *
   * @since 1.0.0
   * @memberof AdminService
   */
  async getCommunities(
    page = 1,
    limit = 20,
    status?: "active" | "inactive",
    userRole?: UserRole
  ) {
    this.checkPermission(userRole || UserRole.USER, UserRole.ADMIN);

    const filter: CommunityFilter = {};
    if (status === "active") filter.memberCount = { $gt: 1 };
    else if (status === "inactive") filter.memberCount = { $lte: 1 };

    const skip = (page - 1) * limit;
    const total = await this.communityModel.countDocuments(filter);

    const communities = await this.communityModel
      .find(filter)
      .skip(skip)
      .limit(limit)
      .populate("createdBy", "username email")
      .sort({ createdAt: -1 })
      .exec();

    return {
      communities,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
    };
  }

  /**
   * Supprime d√©finitivement une communaut√© avec nettoyage complet des donn√©es associ√©es
   *
   * Cette m√©thode permet aux administrateurs de supprimer compl√®tement une communaut√©
   * de la plateforme, incluant automatiquement tous les √©l√©ments associ√©s (membres,
   * posts, messages). Cette action irr√©versible est destin√©e aux cas de mod√©ration
   * s√©v√®re ou de nettoyage de communaut√©s inactives/probl√©matiques.
   *
   * @async
   * @method deleteCommunity
   * @param {string} communityId - Identifiant unique de la communaut√© √† supprimer
   * @param {UserRole} [userRole] - R√¥le de l'utilisateur effectuant la suppression
   * @returns {Promise<{success: boolean; message: string}>} R√©sultat de l'op√©ration de suppression
   * @throws {ForbiddenException} Si r√¥le insuffisant (minimum ADMIN)
   * @throws {NotFoundException} Si la communaut√© n'existe pas
   *
   * @example
   * ```typescript
   * // Supprimer une communaut√© probl√©matique
   * const result = await adminService.deleteCommunity(
   *   "community123",
   *   UserRole.ADMIN
   * );
   *
   * // Nettoyage de communaut√© inactive
   * const result = await adminService.deleteCommunity(
   *   "inactive456",
   *   UserRole.SUPERADMIN
   * );
   *
   * // R√©ponse typique:
   * { success: true, message: "Communaut√© supprim√©e" }
   * ```
   *
   * @warning Cette action est irr√©versible et supprime d√©finitivement toutes les donn√©es
   * @since 1.0.0
   * @memberof AdminService
   */
  async deleteCommunity(
    communityId: string,
    userRole?: UserRole
  ): Promise<{ success: boolean; message: string }> {
    this.checkPermission(userRole || UserRole.USER, UserRole.ADMIN);

    const community = await this.communityModel.findById(communityId);
    if (!community) {
      throw new NotFoundException("Communaut√© non trouv√©e");
    }

    // Supprimer tous les membres, posts, etc.
    await Promise.all([
      this.memberModel.deleteMany({ communityId }),
      this.postModel.deleteMany({ communityId }),
      this.communityModel.findByIdAndDelete(communityId),
    ]);

    return {
      success: true,
      message: "Communaut√© supprim√©e",
    };
  }

  /**
   * R√©cup√®re les activit√©s r√©centes de la plateforme pour surveillance et audit
   *
   * Cette m√©thode compile les derni√®res activit√©s significatives de tous les modules
   * de la plateforme O'Ypunu pour fournir aux administrateurs une vue d'ensemble
   * en temps r√©el des √©v√©nements r√©cents. Elle est optimis√©e pour les tableaux
   * de bord de surveillance et les outils d'audit.
   *
   * @async
   * @method getRecentActivity
   * @param {number} limit - Nombre maximum d'√©l√©ments √† retourner (d√©faut: 50)
   * @param {UserRole} [userRole] - R√¥le de l'utilisateur effectuant la demande
   * @returns {Promise<{recentUsers: User[], recentWords: Word[], recentCommunities: Community[]}>} Donn√©es d'activit√© r√©cente tri√©es par type
   * @throws {ForbiddenException} Si r√¥le insuffisant (minimum ADMIN)
   *
   * @example
   * ```typescript
   * // R√©cup√©rer les 30 derni√®res activit√©s
   * const activity = await adminService.getRecentActivity(30, UserRole.ADMIN);
   *
   * // Analyser les nouveaux utilisateurs
   * console.log(`${activity.recentUsers.length} nouveaux utilisateurs`);
   *
   * // Surveiller les soumissions de mots
   * console.log(`${activity.recentWords.length} nouveaux mots soumis`);
   *
   * // R√©ponse typique:
   * {
   *   recentUsers: [{ username: "nouveau_user", role: "USER", createdAt: "2025-01-01T10:30:00Z", ... }],
   *   recentWords: [{ word: "diboti", language: "yipunu", status: "pending", createdBy: {...}, ... }],
   *   recentCommunities: [{ name: "Nouvelle Communaut√©", memberCount: 5, language: "yipunu", ... }]
   * }
   * ```
   *
   * @since 1.0.0
   * @memberof AdminService
   */
  async getRecentActivity(limit = 50, userRole?: UserRole) {
    this.checkPermission(userRole || UserRole.USER, UserRole.ADMIN);

    const [recentUsers, recentWords, recentCommunities] = await Promise.all([
      this.userModel
        .find({}, { username: 1, email: 1, createdAt: 1, role: 1 })
        .sort({ createdAt: -1 })
        .limit(limit / 3)
        .exec(),
      this.wordModel
        .find({}, { word: 1, language: 1, status: 1, createdAt: 1 })
        .populate("createdBy", "username")
        .sort({ createdAt: -1 })
        .limit(limit / 3)
        .exec(),
      this.communityModel
        .find({}, { name: 1, language: 1, memberCount: 1, createdAt: 1 })
        .populate("createdBy", "username")
        .sort({ createdAt: -1 })
        .limit(limit / 3)
        .exec(),
    ]);

    return {
      recentUsers,
      recentWords,
      recentCommunities,
    };
  }
}
