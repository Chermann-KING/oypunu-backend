/**
 * @fileoverview Contr√¥leur REST pour la gestion des migrations de base de donn√©es
 *
 * Ce contr√¥leur sp√©cialis√© g√®re toutes les op√©rations de migration de base de donn√©es:
 * - Ex√©cution et rollback des migrations
 * - Gestion des indexes critiques
 * - Monitoring et statut des migrations
 * - Op√©rations de for√ßage en cas d'urgence
 * - Statistiques et m√©triques de performance
 *
 * Tous les endpoints n√©cessitent une authentification JWT et des permissions
 * superadmin pour des raisons de s√©curit√© critique et d'impact syst√®me.
 *
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import {
  Controller,
  Post,
  Get,
  Delete,
  UseGuards,
  HttpStatus,
  HttpCode,
} from "@nestjs/common";
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
} from "@nestjs/swagger";
import { JwtAuthGuard } from "../../auth/guards/jwt-auth.guard";
import { RoleGuard } from "../../auth/guards/role.guard";
import { Roles } from "../../common/decorators/roles.decorator";
import { DatabaseMigrationService } from "../../database/database-migration.service";

/**
 * Contr√¥leur de gestion des migrations de base de donn√©es pour O'Ypunu
 *
 * Fournit une API REST s√©curis√©e pour toutes les op√©rations de migration,
 * avec contr√¥le d'acc√®s granulaire r√©serv√© aux superadministrateurs.
 *
 * ## Fonctionnalit√©s principales :
 *
 * ### üöÄ Ex√©cution de migrations
 * - Migration compl√®te de la base de donn√©es
 * - Migration sp√©cialis√©e des indexes critiques
 * - For√ßage d'ex√©cution en cas d'urgence
 *
 * ### üîÑ Op√©rations de rollback
 * - Rollback des indexes critiques
 * - Rollback complet de toutes les migrations
 * - Restauration s√©curis√©e de l'√©tat ant√©rieur
 *
 * ### üìä Monitoring et statut
 * - V√©rification du statut des migrations
 * - Statistiques d√©taill√©es et m√©triques
 * - Historique des op√©rations ex√©cut√©es
 *
 * ### ‚ö†Ô∏è Op√©rations critiques
 * - Toutes les m√©thodes n√©cessitent le r√¥le superadmin
 * - Logging d√©taill√© de toutes les op√©rations
 * - Gestion d'erreurs avec m√©triques de performance
 *
 * @class DatabaseMigrationController
 * @version 1.0.0
 */
@ApiTags("Administration - Database Migration")
@Controller("admin/database")
@UseGuards(JwtAuthGuard, RoleGuard)
@ApiBearerAuth()
export class DatabaseMigrationController {
  constructor(private databaseMigrationService: DatabaseMigrationService) {}

  /**
   * üìä M√âTHODE STATISTIQUES DES MIGRATIONS
   *
   * R√©cup√®re les statistiques d√©taill√©es des migrations de base de donn√©es.
   * Cette m√©thode retourne des m√©triques compl√®tes sur l'√©tat et l'historique
   * des migrations ex√©cut√©es sur la plateforme. Accessible uniquement aux
   * administrateurs et superadministrateurs pour des raisons de s√©curit√©.
   *
   * @async
   * @method getMigrationStatistics
   * @returns {Promise<Object>} Statistiques d√©taill√©es des migrations
   * @throws {UnauthorizedException} Si non authentifi√©
   * @throws {ForbiddenException} Si r√¥le insuffisant
   *
   * @example
   * ```typescript
   * // Appel API
   * GET /admin/database/migrate/statistics
   * Authorization: Bearer <jwt-token>
   *
   * // R√©ponse typique:
   * {
   *   "totalMigrations": 12,
   *   "executedMigrations": 10,
   *   "pendingMigrations": 2,
   *   "lastMigrationDate": "2025-01-01T12:00:00Z",
   *   "indexesStatus": {
   *     "total": 45,
   *     "active": 43,
   *     "failed": 2
   *   },
   *   "performanceMetrics": {
   *     "averageExecutionTime": 3.2,
   *     "totalExecutionTime": 32.5,
   *     "slowestMigration": "critical-indexes-migration"
   *   },
   *   "migrationHistory": [{
   *     "name": "critical-indexes-migration",
   *     "status": "completed",
   *     "executionTime": 5.8,
   *     "executedAt": "2025-01-01T10:30:00Z"
   *   }]
   * }
   * ```
   */
  @Post("migrate")
  @Roles("superadmin")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: "Ex√©cuter toutes les migrations de base de donn√©es",
  })
  @ApiResponse({
    status: 200,
    description: "Migrations ex√©cut√©es avec succ√®s",
    schema: {
      type: "object",
      properties: {
        message: { type: "string" },
        timestamp: { type: "string" },
        migrationsExecuted: { type: "array", items: { type: "string" } },
      },
    },
  })
  @ApiResponse({
    status: 500,
    description: "Erreur lors de l'ex√©cution des migrations",
  })
  async runAllMigrations() {
    const startTime = new Date();

    await this.databaseMigrationService.runAllMigrations();

    return {
      message: "Toutes les migrations ont √©t√© ex√©cut√©es avec succ√®s",
      timestamp: new Date().toISOString(),
      executionTime: Date.now() - startTime.getTime(),
      migrationsExecuted: ["critical-indexes-migration"],
    };
  }

  /**
   * üîß M√âTHODE MIGRATION DES INDEXES CRITIQUES
   *
   * Ex√©cute la migration sp√©cifique des indexes critiques de la base de donn√©es.
   * Cette m√©thode cr√©√© tous les indexes essentiels pour optimiser les performances
   * des requ√™tes sur les collections principales de la plateforme. R√©serv√©e aux
   * superadministrateurs pour des raisons de s√©curit√© et d'impact syst√®me.
   *
   * @async
   * @method runIndexesMigration
   * @returns {Promise<Object>} R√©sultat d√©taill√© de la migration avec m√©triques
   * @throws {UnauthorizedException} Si non authentifi√©
   * @throws {ForbiddenException} Si r√¥le insuffisant
   * @throws {InternalServerErrorException} Si erreur lors de la cr√©ation des indexes
   *
   * @example
   * ```typescript
   * // Appel API
   * POST /admin/database/migrate/indexes
   * Authorization: Bearer <jwt-token>
   *
   * // R√©ponse typique:
   * {
   *   "message": "Migration des indexes critiques ex√©cut√©e avec succ√®s",
   *   "timestamp": "2025-01-01T12:00:00Z",
   *   "executionTime": 3200,
   *   "indexesCreated": [
   *     "Users: email, username, role, isEmailVerified",
   *     "Words: word, status, language, category, compound indexes",
   *     "Communities: language, name, createdBy, membersCount"
   *   ]
   * }
   * ```
   */
  @Post("migrate/indexes")
  @Roles("superadmin")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: "Ex√©cuter la migration des indexes critiques" })
  @ApiResponse({
    status: 200,
    description: "Migration des indexes ex√©cut√©e avec succ√®s",
  })
  async runIndexesMigration() {
    const startTime = new Date();

    await this.databaseMigrationService.runCriticalIndexesMigration();

    return {
      message: "Migration des indexes critiques ex√©cut√©e avec succ√®s",
      timestamp: new Date().toISOString(),
      executionTime: Date.now() - startTime.getTime(),
      indexesCreated: [
        "Users: email, username, role, isEmailVerified",
        "Words: word, status, language, category, compound indexes",
        "Communities: language, name, createdBy, membersCount",
        "Messages: conversation+timestamp, sender, readBy",
        "ActivityFeed: user+timestamp, type, type+timestamp",
        "RefreshTokens: token, user, TTL expiration",
      ],
    };
  }

  /**
   * üîÑ M√âTHODE ROLLBACK DES INDEXES CRITIQUES
   *
   * Ex√©cute le rollback de la migration des indexes critiques de la base de donn√©es.
   * Cette m√©thode supprime tous les indexes cr√©√©s par la migration des indexes
   * critiques, permettant de revenir √† l'√©tat ant√©rieur en cas de probl√®me.
   * R√©serv√©e aux superadministrateurs pour des raisons de s√©curit√© et d'impact syst√®me.
   *
   * @async
   * @method rollbackIndexesMigration
   * @returns {Promise<Object>} R√©sultat d√©taill√© du rollback avec m√©triques
   * @throws {UnauthorizedException} Si non authentifi√©
   * @throws {ForbiddenException} Si r√¥le insuffisant
   * @throws {InternalServerErrorException} Si erreur lors du rollback des indexes
   *
   * @example
   * ```typescript
   * // Appel API
   * DELETE /admin/database/migrate/indexes
   * Authorization: Bearer <jwt-token>
   *
   * // R√©ponse typique:
   * {
   *   "message": "Rollback de la migration des indexes ex√©cut√© avec succ√®s",
   *   "timestamp": "2025-01-01T12:00:00Z",
   *   "executionTime": 1800,
   *   "indexesRemoved": [
   *     "Users: email, username, role, isEmailVerified",
   *     "Words: word, status, language, category, compound indexes",
   *     "Communities: language, name, createdBy, membersCount"
   *   ]
   * }
   * ```
   */
  @Delete("migrate/indexes")
  @Roles("superadmin")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: "Rollback de la migration des indexes critiques" })
  @ApiResponse({
    status: 200,
    description: "Rollback de la migration des indexes ex√©cut√© avec succ√®s",
  })
  async rollbackIndexesMigration() {
    const startTime = new Date();

    await this.databaseMigrationService.rollbackCriticalIndexesMigration();

    return {
      message: "Rollback de la migration des indexes ex√©cut√© avec succ√®s",
      timestamp: new Date().toISOString(),
      executionTime: Date.now() - startTime.getTime(),
      indexesRemoved: [
        "Tous les indexes cr√©√©s par la migration ont √©t√© supprim√©s",
      ],
    };
  }

  /**
   * üìä M√âTHODE V√âRIFICATION STATUT DES MIGRATIONS
   *
   * V√©rifie et r√©cup√®re le statut d√©taill√© de toutes les migrations de base de donn√©es.
   * Cette m√©thode analyse l'√©tat actuel des migrations, identifie celles qui sont
   * en attente, ex√©cut√©es ou √©chou√©es, et fournit des m√©triques de performance.
   * Accessible aux administrateurs et superadministrateurs pour le monitoring.
   *
   * @async
   * @method getMigrationStatus
   * @returns {Promise<Object>} Statut d√©taill√© et m√©triques des migrations
   * @throws {UnauthorizedException} Si non authentifi√©
   * @throws {ForbiddenException} Si r√¥le insuffisant
   * @throws {InternalServerErrorException} Si erreur lors de la v√©rification
   *
   * @example
   * ```typescript
   * // Appel API
   * GET /admin/database/migrate/status
   * Authorization: Bearer <jwt-token>
   *
   * // R√©ponse typique:
   * {
   *   "message": "Statut des migrations r√©cup√©r√© avec succ√®s",
   *   "timestamp": "2025-01-01T12:00:00Z",
   *   "migrations": {
   *     "total": 12,
   *     "executed": 10,
   *     "pending": 2,
   *     "failed": 0,
   *     "lastExecuted": "critical-indexes-migration",
   *     "lastExecutionDate": "2025-01-01T10:30:00Z",
   *     "pendingList": ["new-collections-migration", "performance-optimization"]
   *   }
   * }
   * ```
   */
  @Get("migrate/status")
  @Roles("admin", "superadmin")
  @ApiOperation({ summary: "V√©rifier le statut des migrations" })
  @ApiResponse({
    status: 200,
    description: "Statut des migrations r√©cup√©r√© avec succ√®s",
  })
  async getMigrationStatus() {
    const status = await this.databaseMigrationService.checkMigrationStatus();

    return {
      message: "Statut des migrations r√©cup√©r√© avec succ√®s",
      timestamp: new Date().toISOString(),
      migrations: status,
    };
  }

  /**
   * ‚ö†Ô∏è M√âTHODE FOR√áAGE D'EX√âCUTION DES MIGRATIONS
   *
   * Force l'ex√©cution de toutes les migrations en ignorant les v√©rifications de s√©curit√©.
   * Cette m√©thode dangereuse permet de passer outre les contr√¥les de validation et
   * d'ex√©cuter les migrations m√™me en cas d'erreurs d√©tect√©es. √Ä utiliser uniquement
   * en dernier recours lors de situations critiques. R√©serv√©e exclusivement aux
   * superadministrateurs pour des raisons de s√©curit√© maximale.
   *
   * @async
   * @method forceMigrations
   * @returns {Promise<Object>} R√©sultat d√©taill√© de l'op√©ration forc√©e avec avertissements
   * @throws {UnauthorizedException} Si non authentifi√©
   * @throws {ForbiddenException} Si r√¥le insuffisant
   * @throws {InternalServerErrorException} Si erreur critique lors du for√ßage
   *
   * @warning ‚ö†Ô∏è OP√âRATION DANGEREUSE - Ignore les v√©rifications de s√©curit√©
   * @warning ‚ö†Ô∏è √Ä utiliser uniquement en cas d'urgence absolue
   * @warning ‚ö†Ô∏è Peut causer des corruptions de donn√©es si mal utilis√©e
   *
   * @example
   * ```typescript
   * // Appel API
   * POST /admin/database/migrate/force
   * Authorization: Bearer <jwt-token>
   *
   * // R√©ponse typique:
   * {
   *   "message": "‚ö†Ô∏è Migrations forc√©es ex√©cut√©es avec succ√®s",
   *   "timestamp": "2025-01-01T12:00:00Z",
   *   "executionTime": 5400,
   *   "warning": "Cette op√©ration a ignor√© les v√©rifications de s√©curit√©",
   *   "forcedOperations": [
   *     "Validation des donn√©es ignor√©e",
   *     "V√©rification des d√©pendances contourn√©e",
   *     "Contr√¥les d'int√©grit√© d√©sactiv√©s"
   *   ]
   * }
   * ```
   */
  @Post("migrate/force")
  @Roles("superadmin")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: "Forcer l'ex√©cution des migrations (ignorer les v√©rifications)",
    description:
      "‚ö†Ô∏è ATTENTION: Cette op√©ration force l'ex√©cution m√™me si des erreurs sont d√©tect√©es",
  })
  @ApiResponse({
    status: 200,
    description: "Migrations forc√©es ex√©cut√©es avec succ√®s",
  })
  async forceMigrations() {
    const startTime = new Date();

    await this.databaseMigrationService.forceMigrations();

    return {
      message: "‚ö†Ô∏è Migrations forc√©es ex√©cut√©es avec succ√®s",
      timestamp: new Date().toISOString(),
      executionTime: Date.now() - startTime.getTime(),
      warning: "Cette op√©ration a ignor√© les v√©rifications de s√©curit√©",
    };
  }

  /**
   * üîÑ M√âTHODE ROLLBACK DE TOUTES LES MIGRATIONS
   *
   * Ex√©cute le rollback complet de toutes les migrations de base de donn√©es.
   * Cette m√©thode dangereuse supprime tous les indexes et modifications cr√©√©s
   * par l'ensemble des migrations, permettant de revenir √† l'√©tat initial de
   * la base de donn√©es. R√©serv√©e exclusivement aux superadministrateurs pour
   * des raisons de s√©curit√© critique et d'impact syst√®me majeur.
   *
   * @async
   * @method rollbackAllMigrations
   * @returns {Promise<Object>} R√©sultat d√©taill√© de l'op√©ration de rollback complet
   * @throws {UnauthorizedException} Si non authentifi√©
   * @throws {ForbiddenException} Si r√¥le insuffisant
   * @throws {InternalServerErrorException} Si erreur lors du rollback global
   *
   * @warning ‚ö†Ô∏è OP√âRATION EXTR√äMEMENT DANGEREUSE - Supprime tous les indexes
   * @warning ‚ö†Ô∏è Peut affecter gravement les performances de la base de donn√©es
   * @warning ‚ö†Ô∏è √Ä utiliser uniquement en cas d'urgence absolue
   *
   * @example
   * ```typescript
   * // Appel API
   * DELETE /admin/database/migrate/all
   * Authorization: Bearer <jwt-token>
   *
   * // R√©ponse typique:
   * {
   *   "message": "‚ö†Ô∏è Rollback de toutes les migrations ex√©cut√© avec succ√®s",
   *   "timestamp": "2025-01-01T12:00:00Z",
   *   "executionTime": 8500,
   *   "warning": "Tous les indexes cr√©√©s par les migrations ont √©t√© supprim√©s",
   *   "operations": [
   *     "Suppression des indexes critiques",
   *     "Rollback des collections optimis√©es",
   *     "Restauration de l'√©tat initial"
   *   ]
   * }
   * ```
   */
  @Delete("migrate/all")
  @Roles("superadmin")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: "Rollback de toutes les migrations",
    description:
      "‚ö†Ô∏è ATTENTION: Cette op√©ration supprime tous les indexes cr√©√©s par les migrations",
  })
  @ApiResponse({
    status: 200,
    description: "Rollback de toutes les migrations ex√©cut√© avec succ√®s",
  })
  async rollbackAllMigrations() {
    const startTime = new Date();

    await this.databaseMigrationService.rollbackAllMigrations();

    return {
      message: "‚ö†Ô∏è Rollback de toutes les migrations ex√©cut√© avec succ√®s",
      timestamp: new Date().toISOString(),
      executionTime: Date.now() - startTime.getTime(),
      warning: "Tous les indexes cr√©√©s par les migrations ont √©t√© supprim√©s",
    };
  }
}
