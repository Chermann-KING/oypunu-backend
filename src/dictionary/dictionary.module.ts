/**
 * @fileoverview Module du dictionnaire O'Ypunu - C≈ìur du syst√®me linguistique
 * 
 * Ce module constitue le c≈ìur du syst√®me de dictionnaire multilingue O'Ypunu
 * avec architecture modulaire avanc√©e, services sp√©cialis√©s et contr√¥leurs
 * d√©coupl√©s pour une maintenabilit√© optimale. Il int√®gre gestion compl√®te
 * des mots, cat√©gories, favoris, r√©visions et fonctionnalit√©s avanc√©es.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
// import { RedisModule } from '@nestjs-modules/ioredis';

// Sch√©mas
import { Word, WordSchema } from './schemas/word.schema';
import { Category, CategorySchema } from './schemas/category.schema';
import {
  FavoriteWord,
  FavoriteWordSchema,
} from './schemas/favorite-word.schema';
import {
  RevisionHistory,
  RevisionHistorySchema,
} from './schemas/revision-history.schema';
import {
  WordNotification,
  WordNotificationSchema,
} from './schemas/word-notification.schema';
import { Language, LanguageSchema } from '../languages/schemas/language.schema';
import { WordView, WordViewSchema } from '../users/schemas/word-view.schema';

// Services
import { WordsService } from './services/words.service';
import { CategoriesService } from './services/categories.service';
import { AudioService } from './services/audio.service';
// import { AudioCacheService } from './services/audio-cache.service';

// PHASE 1 - Services utilitaires pour refactoring
import { WordValidationService } from './services/word-services/word-validation.service';
import { WordPermissionService } from './services/word-services/word-permission.service';
import { WordNotificationService } from './services/word-services/word-notification.service';
import { WordTranslationService } from './services/word-services/word-translation.service';

// PHASE 2-7 - Services sp√©cialis√©s
import { WordAudioService } from './services/word-services/word-audio.service';
import { WordFavoriteService } from './services/word-services/word-favorite.service';
import { WordAnalyticsService } from './services/word-services/word-analytics.service';
import { WordRevisionService } from './services/word-services/word-revision.service';
import { WordCoreService } from './services/word-services/word-core.service';

// Contr√¥leurs
import { WordsController } from './controllers/words.controller';
import { CategoriesController } from './controllers/categories.controller';
import { FavoriteWordsController } from './controllers/favorite-words.controller';

// PHASE 3-1: Contr√¥leurs sp√©cialis√©s (split du WordsController god class)
import { WordsCoreController } from './controllers/words-core.controller';
import { WordsAdminController } from './controllers/words-admin.controller';
import { WordsAnalyticsController } from './controllers/words-analytics.controller';
import { WordsRevisionController } from './controllers/words-revision.controller';
import { WordsPermissionController } from './controllers/words-permission.controller';
import { WordsTranslationController } from './controllers/words-translation.controller';
import { UsersModule } from 'src/users/users.module';
// ‚ú® NOUVEL IMPORT pour l'int√©gration de la d√©tection automatique
import { TranslationModule } from '../translation/translation.module';
import { ActivityModule } from '../common/activity.module';
import { RepositoriesModule } from '../repositories/repositories.module';
import { LanguagesModule } from '../languages/languages.module';

/**
 * Module du dictionnaire O'Ypunu - Architecture avanc√©e
 * 
 * Ce module impl√©mente une architecture modulaire sophistiqu√©e pour
 * le syst√®me de dictionnaire multilingue avec services d√©coupl√©s,
 * contr√¥leurs sp√©cialis√©s et int√©grations externes optimis√©es.
 * 
 * ## üèóÔ∏è Architecture modulaire :
 * 
 * ### üìä Sch√©mas MongoDB
 * - Word : Sch√©ma principal des mots avec m√©tadonn√©es compl√®tes
 * - Category : Organisation hi√©rarchique des mots par cat√©gories
 * - FavoriteWord : Gestion des favoris utilisateur
 * - RevisionHistory : Historique complet des modifications
 * - WordNotification : Syst√®me de notifications linguistiques
 * - Language : Support multilingue avec m√©tadonn√©es
 * - WordView : Tracking des consultations pour analytics
 * 
 * ### üéØ Services sp√©cialis√©s (Pattern de d√©couplage)
 * - **Phase 1** : Services utilitaires (validation, permissions, notifications, traductions)
 * - **Phase 2-7** : Services m√©tier (audio, favoris, analytics, r√©visions, core)
 * - **Int√©grations** : Translation, Activity, Repositories modules
 * 
 * ### üéÆ Contr√¥leurs d√©coupl√©s
 * - **Existants** : Words, Categories, FavoriteWords (legacy)
 * - **Sp√©cialis√©s** : Core, Admin, Analytics, Revision, Permission, Translation
 * - **B√©n√©fices** : Single Responsibility, testabilit√©, maintenabilit√©
 * 
 * ## üîó D√©pendances externes :
 * - **UsersModule** : Int√©gration utilisateurs et permissions
 * - **TranslationModule** : D√©tection automatique et traductions
 * - **ActivityModule** : Logging d'activit√©s et auditabilit√©
 * - **RepositoriesModule** : Pattern Repository pour abstraction donn√©es
 * 
 * @class DictionaryModule
 * @version 1.0.0
 */
@Module({
  imports: [
    MongooseModule.forFeature([
      { name: Word.name, schema: WordSchema },
      { name: Category.name, schema: CategorySchema },
      { name: FavoriteWord.name, schema: FavoriteWordSchema },
      { name: RevisionHistory.name, schema: RevisionHistorySchema },
      { name: WordNotification.name, schema: WordNotificationSchema },
      { name: Language.name, schema: LanguageSchema },
      { name: WordView.name, schema: WordViewSchema },
    ]),
    // RedisModule,
    UsersModule,
    // ‚ú® NOUVEAU: Import du module de traduction pour la d√©tection automatique
    TranslationModule,
    ActivityModule,
    RepositoriesModule, // Already imported - Repository Pattern support
    LanguagesModule, // Pour le mapping dynamique des accents audio
  ],
  controllers: [
    // Contr√¥leurs existants
    WordsController, 
    CategoriesController, 
    FavoriteWordsController,
    // PHASE 3-1: Contr√¥leurs sp√©cialis√©s (split du WordsController god class)
    WordsCoreController,
    WordsAdminController,
    WordsAnalyticsController,
    WordsRevisionController,
    WordsPermissionController,
    WordsTranslationController,
  ],
  providers: [
    WordsService, 
    CategoriesService, 
    AudioService,
    // PHASE 1 - Services utilitaires pour refactoring
    WordValidationService,
    WordPermissionService,
    WordNotificationService,
    WordTranslationService,
    // PHASE 2-7 - Services sp√©cialis√©s  
    WordAudioService,
    WordFavoriteService,
    WordAnalyticsService,
    WordRevisionService,
    WordCoreService,
  ],
  exports: [
    WordsService, 
    CategoriesService,
    AudioService,
    // PHASE 1 - Export des services utilitaires
    WordValidationService,
    WordPermissionService,
    WordNotificationService,
    WordTranslationService,
    // PHASE 2-7 - Export des services sp√©cialis√©s
    WordAudioService,
    WordFavoriteService,
    WordAnalyticsService,
    WordRevisionService,
    WordCoreService,
  ],
})
export class DictionaryModule {}
