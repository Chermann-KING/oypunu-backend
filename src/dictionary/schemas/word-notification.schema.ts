/**
 * @fileoverview Sch√©ma des notifications de mots pour O'Ypunu
 * 
 * Ce sch√©ma d√©finit le syst√®me de notifications li√© aux mots du dictionnaire
 * avec types d'√©v√©nements, m√©tadonn√©es contextuelles et gestion du statut
 * de lecture pour informer les utilisateurs des activit√©s pertinentes.
 * 
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Schema as MongooseSchema } from 'mongoose';
import { User } from '../../users/schemas/user.schema';

/**
 * Type document Mongoose pour les notifications de mots
 * 
 * @typedef {WordNotification & Document} WordNotificationDocument
 */
export type WordNotificationDocument = WordNotification & Document;

/**
 * Sch√©ma des notifications syst√®me li√©es aux mots
 * 
 * Cette classe d√©finit le syst√®me de notifications pour informer les utilisateurs
 * des √©v√©nements importants concernant les mots du dictionnaire, leurs r√©visions
 * et les actions de mod√©ration.
 * 
 * ## üì¢ Types de notifications :
 * - **word_revision** : R√©vision propos√©e sur un mot
 * - **word_approved** : Mot approuv√© par mod√©ration
 * - **word_rejected** : Mot rejet√© par mod√©ration
 * - **revision_approved** : R√©vision accept√©e
 * - **revision_rejected** : R√©vision refus√©e
 * 
 * ## üéØ Fonctionnalit√©s :
 * - **Notifications cibl√©es** : Envoi aux utilisateurs concern√©s
 * - **Tra√ßabilit√© actions** : Qui a d√©clench√© la notification
 * - **Statut de lecture** : Gestion lu/non-lu avec horodatage
 * - **M√©tadonn√©es riches** : Contexte d√©taill√© de l'√©v√©nement
 * 
 * ## üìä Cas d'usage :
 * - Notifications de mod√©ration
 * - Alertes de r√©visions
 * - Feedback aux contributeurs
 * - Historique des actions
 * 
 * @class WordNotification
 * @version 1.0.0
 */
@Schema({ 
  timestamps: true,
  collection: 'word_notifications'
})
export class WordNotification {
  /** Type de notification d'√©v√©nement */
  @Prop({ 
    required: true,
    enum: [
      'word_revision',
      'word_approved', 
      'word_rejected',
      'revision_approved',
      'revision_rejected'
    ],
    index: true
  })
  type:
    | 'word_revision'
    | 'word_approved'
    | 'word_rejected'
    | 'revision_approved'
    | 'revision_rejected';

  /** R√©f√©rence vers le mot concern√© par la notification */
  @Prop({ 
    type: MongooseSchema.Types.ObjectId, 
    ref: 'Word', 
    required: true,
    index: true
  })
  wordId: string;

  /** Utilisateur destinataire de la notification */
  @Prop({ 
    type: MongooseSchema.Types.ObjectId, 
    ref: 'User', 
    required: true,
    index: true
  })
  targetUserId: User;

  /** Utilisateur qui a d√©clench√© l'√©v√©nement (optionnel) */
  @Prop({ 
    type: MongooseSchema.Types.ObjectId, 
    ref: 'User',
    index: true
  })
  triggeredBy?: User;

  /** Message descriptif de la notification */
  @Prop({ required: true })
  message: string;

  /** Statut de lecture de la notification */
  @Prop({ 
    default: false,
    index: true
  })
  isRead: boolean;

  /** Horodatage de la lecture (si applicable) */
  @Prop()
  readAt?: Date;

  /** M√©tadonn√©es contextuelles de la notification */
  @Prop({ type: Object })
  metadata?: {
    /** Nom du mot concern√© */
    wordName?: string;
    /** Num√©ro de version de r√©vision */
    revisionVersion?: number;
    /** Liste des modifications apport√©es */
    changes?: string[];
    /** Raison du rejet/approbation */
    reason?: string;
    /** Donn√©es additionnelles sp√©cifiques */
    additional?: Record<string, any>;
  };
}

/**
 * Sch√©ma Mongoose compil√© avec index optimis√©s
 */
export const WordNotificationSchema =
  SchemaFactory.createForClass(WordNotification);

// === INDEX OPTIMIS√âS POUR PERFORMANCES ===

// Index composite pour r√©cup√©ration rapide des notifications non lues par utilisateur
WordNotificationSchema.index({ targetUserId: 1, isRead: 1, createdAt: -1 });

// Index par mot pour tra√ßabilit√© des notifications li√©es √† un mot sp√©cifique
WordNotificationSchema.index({ wordId: 1, createdAt: -1 });

// Index par type pour analytics et filtrage par cat√©gorie d'√©v√©nement
WordNotificationSchema.index({ type: 1, createdAt: -1 });

// Index par d√©clencheur pour tra√ßabilit√© des actions utilisateur
WordNotificationSchema.index({ triggeredBy: 1, createdAt: -1 });

// Index g√©n√©ral par date pour pagination et archivage
WordNotificationSchema.index({ createdAt: -1 });

// Index composite pour notifications r√©centes non lues
WordNotificationSchema.index({ isRead: 1, createdAt: -1 });
