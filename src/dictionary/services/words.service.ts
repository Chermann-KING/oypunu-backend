import {
  Injectable,
  NotFoundException,
  BadRequestException,
} from "@nestjs/common";
import { Word, WordDocument } from "../schemas/word.schema";
import {
  RevisionHistory,
} from "../schemas/revision-history.schema";
import { CreateWordDto } from "../dto/create-word.dto";
import { UpdateWordDto } from "../dto/update-word.dto";
import { SearchWordsDto } from "../dto/search-words.dto";
import { User, UserRole } from "../../users/schemas/user.schema";
import { CategoriesService } from "../services/categories.service";
import { UsersService } from "../../users/services/users.service";
import { AudioService } from "./audio.service";
import { ActivityService } from "../../common/services/activity.service";
// PHASE 2-7 - Import services sp√©cialis√©s
import { WordAudioService } from "./word-services/word-audio.service";
import { WordFavoriteService } from "./word-services/word-favorite.service";
import { WordAnalyticsService } from "./word-services/word-analytics.service";
import { WordRevisionService } from "./word-services/word-revision.service";
import { WordTranslationService } from "./word-services/word-translation.service";
import { WordCoreService } from "./word-services/word-core.service";

@Injectable()
export class WordsService {
  constructor(
    private categoriesService: CategoriesService,
    private usersService: UsersService,
    private audioService: AudioService,
    private activityService: ActivityService,
    // PHASE 2-7 - Injection services sp√©cialis√©s
    private wordAudioService: WordAudioService,
    private wordFavoriteService: WordFavoriteService,
    private wordAnalyticsService: WordAnalyticsService,
    private wordRevisionService: WordRevisionService,
    private wordTranslationService: WordTranslationService,
    private wordCoreService: WordCoreService
  ) {}

  // Injecter les d√©pendances (ActivityService est optionnel pour √©viter les erreurs circulaires)
  private get _activityService(): ActivityService | null {
    try {
      return this.activityService;
    } catch {
      return null;
    }
  }

  async create(
    createWordDto: CreateWordDto,
    user: { _id?: string; userId?: string; role: string }
  ): Promise<Word> {
    // V√©rifier si l'utilisateur a soit _id soit userId
    if (!user?._id && !user?.userId) {
      throw new BadRequestException("Utilisateur invalide");
    }

    // Utiliser l'ID appropri√© selon ce qui est disponible
    const userIdLocal: string = user._id || user.userId || "";

    // PHASE 5 - D√âL√âGATION: V√©rifier si le mot existe d√©j√† (d√©l√©gation vers WordCoreService)
    console.log('üîç WordsService.create - V√©rification existence via WordCoreService');
    return this.wordCoreService.create(createWordDto, user);

  }

  /**
   * Cr√©e des traductions bidirectionnelles pour un mot nouvellement cr√©√©
   * PHASE 6B - D√âL√âGATION: D√©l√©gation vers WordTranslationService
   */
  private async createBidirectionalTranslations(
    sourceWord: WordDocument,
    userId: string
  ): Promise<void> {
    console.log(
      "üîÑ WordsService.createBidirectionalTranslations - D√©l√©gation vers WordTranslationService"
    );
    return this.wordTranslationService.createBidirectionalTranslations(
      sourceWord,
      userId
    );
  }

  async findAll(
    page = 1,
    limit = 10,
    status = "approved"
  ): Promise<{
    words: Word[];
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  }> {
    console.log("üé≠ WordsService.findAll - D√©l√©gation vers WordCoreService");
    const result = await this.wordCoreService.findAll(page, limit, status);
    
    return {
      ...result,
      totalPages: Math.ceil(result.total / result.limit),
    };
  }

  /**
   * R√©cup√®re un mot par ID
   * PHASE 7B - D√âL√âGATION: D√©l√©gation vers WordCoreService
   */
  async findOne(id: string): Promise<Word> {
    console.log("üé≠ WordsService.findOne - D√©l√©gation vers WordCoreService");
    return this.wordCoreService.findOne(id);
  }

  // PHASE 4 - D√âL√âGATION: Enregistrer une vue sur un mot
  async trackWordView(
    wordId: string,
    userId: string,
    viewType: "search" | "detail" | "favorite" = "detail"
  ): Promise<void> {
    console.log(
      "üìä WordsService.trackWordView - D√©l√©gation vers WordAnalyticsService"
    );
    return this.wordAnalyticsService.trackWordView(wordId, userId, viewType);
  }

  /**
   * Met √† jour un mot existant
   * PHASE 7B - D√âL√âGATION: D√©l√©gation vers WordCoreService
   */
  async update(
    id: string,
    updateWordDto: UpdateWordDto,
    user: User
  ): Promise<Word> {
    console.log("üé≠ WordsService.update - D√©l√©gation vers WordCoreService");
    return this.wordCoreService.update(id, updateWordDto, user);
  }

  /**
   * Met √† jour un mot avec fichier audio en une seule op√©ration
   * PHASE 2 - D√©l√©gation vers WordAudioService
   */
  async updateWithAudio(
    id: string,
    updateWordDto: UpdateWordDto,
    audioFile: Express.Multer.File,
    user: User
  ): Promise<Word> {
    console.log("üéµ WordsService.updateWithAudio - D√©but");

    // PHASE 5 - D√âL√âGATION: V√©rification mot via WordCoreService
    const word = await this.wordCoreService.findOne(id);

    console.log("üìù √âtape 1: Mise √† jour des donn√©es textuelles du mot");

    // √âtape 1: Mettre √† jour les donn√©es textuelles du mot
    const updatedWord = await this.update(id, updateWordDto, user);

    // √âtape 2: Ajouter le fichier audio si pr√©sent
    if (audioFile && audioFile.buffer && audioFile.size > 0) {
      console.log("üéôÔ∏è √âtape 2: Ajout du fichier audio via WordAudioService");

      try {
        // D√©l√©guer vers WordAudioService
        const language = updatedWord.language || "fr";
        const wordWithAudio = await this.wordAudioService.updateWordWithAudio(
          id,
          audioFile.buffer,
          language,
          user
        );

        console.log("‚úÖ Mise √† jour avec audio termin√©e avec succ√®s");
        return wordWithAudio;
      } catch (audioError) {
        console.error("‚ùå Erreur lors de l'ajout de l'audio:", audioError);

        // L'audio a √©chou√© mais le mot a √©t√© mis √† jour
        // On retourne le mot mis √† jour avec un avertissement
        console.warn(
          "‚ö†Ô∏è Le mot a √©t√© mis √† jour mais l'audio n'a pas pu √™tre ajout√©"
        );
        throw new BadRequestException(
          `Le mot a √©t√© mis √† jour avec succ√®s, mais l'ajout de l'audio a √©chou√©: ${
            audioError instanceof Error
              ? audioError.message
              : String(audioError)
          }`
        );
      }
    } else {
      console.log(
        "üìù Pas de fichier audio fourni, mise √† jour textuelle uniquement"
      );
      return updatedWord;
    }
  }

  /**
   * D√©termine l'accent par d√©faut bas√© sur la langue
   * PHASE 2 - D√©l√©gation vers WordAudioService
   */
  private getDefaultAccentForLanguage(language: string): string {
    return this.wordAudioService.getDefaultAccentForLanguage(language);
  }

  // PHASE 5 - D√âL√âGATION: R√©cup√©rer l'historique des r√©visions
  async getRevisionHistory(wordId: string): Promise<RevisionHistory[]> {
    console.log(
      "üìù WordsService.getRevisionHistory - D√©l√©gation vers WordRevisionService"
    );
    return this.wordRevisionService.getRevisionHistory(wordId);
  }

  // PHASE 5 - D√âL√âGATION: Approuver une r√©vision
  async approveRevision(
    wordId: string,
    revisionId: string,
    adminUser: User,
    notes?: string
  ): Promise<Word> {
    console.log(
      "üìù WordsService.approveRevision - D√©l√©gation vers WordRevisionService"
    );
    return this.wordRevisionService.approveRevision(
      wordId,
      revisionId,
      adminUser,
      notes
    );
  }

  // PHASE 5 - D√âL√âGATION: Rejeter une r√©vision
  async rejectRevision(
    wordId: string,
    revisionId: string,
    adminUser: User,
    reason: string
  ): Promise<void> {
    console.log(
      "üìù WordsService.rejectRevision - D√©l√©gation vers WordRevisionService"
    );
    return this.wordRevisionService.rejectRevision(
      wordId,
      revisionId,
      adminUser,
      reason
    );
  }

  /**
   * Ajoute un fichier audio √† un mot
   * PHASE 2 - D√©l√©gation vers WordAudioService
   */
  async addAudioFile(
    wordId: string,
    accent: string,
    fileBuffer: Buffer,
    user: User
  ): Promise<Word> {
    console.log(
      "üéµ WordsService.addAudioFile - D√©l√©gation vers WordAudioService"
    );
    return this.wordAudioService.addAudioFile(wordId, accent, fileBuffer, user);
  }

  async canUserEditWord(wordId: string, user: User): Promise<boolean> {
    console.log("=== DEBUG canUserEditWord ===");
    console.log("WordId:", wordId);
    console.log("User:", {
      _id: user._id,
      username: user.username,
      role: user.role,
    });

    if (user.role === UserRole.ADMIN || user.role === UserRole.SUPERADMIN) {
      console.log("‚úÖ User is admin/superadmin, allowing edit");
      return true;
    }

    // PHASE 5 - D√âL√âGATION: V√©rification mot via WordCoreService  
    try {
      const word = await this.wordCoreService.findOne(wordId);
      if (!word) {
        console.log("‚ùå Word not found");
        return false;
      }

    console.log("Word found:", {
      word: word.word,
      createdBy: word.createdBy,
      createdByType: typeof word.createdBy,
      status: word.status,
    });

    // L'utilisateur peut modifier s'il est le cr√©ateur et que le mot n'est pas rejet√©
    if (!word.createdBy || word.status === "rejected") {
      console.log("‚ùå No createdBy or word is rejected");
      return false;
    }

    // G√©rer le cas o√π createdBy est un ObjectId (string) ou un objet User peupl√©
    let createdByIdToCompare: string;
    if (typeof word.createdBy === "object" && "_id" in word.createdBy) {
      // createdBy est un objet User peupl√©
      createdByIdToCompare = String(word.createdBy._id);
      console.log("üîç createdBy is User object, ID:", createdByIdToCompare);
    } else {
      // createdBy est juste un ObjectId (string)
      createdByIdToCompare = String(word.createdBy);
      console.log("üîç createdBy is ObjectId string, ID:", createdByIdToCompare);
    }

    const userIdToCompare = String(user._id);
    console.log("üîç Comparing IDs:", {
      createdByIdToCompare,
      userIdToCompare,
      areEqual: createdByIdToCompare === userIdToCompare,
    });

      const canEdit = createdByIdToCompare === userIdToCompare;
      console.log("‚úÖ Can edit result:", canEdit);
      console.log("=== END DEBUG canUserEditWord ===");

      return canEdit;
    } catch (error) {
      console.log("‚ùå Error checking word:", error);
      return false;
    }
  }

  // PHASE 5 - D√âL√âGATION: R√©cup√©rer les r√©visions en attente avec pagination
  async getPendingRevisions(
    page = 1,
    limit = 10
  ): Promise<{
    revisions: RevisionHistory[];
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  }> {
    console.log(
      "üìù WordsService.getPendingRevisions - D√©l√©gation vers WordRevisionService"
    );
    return this.wordRevisionService.getPendingRevisions(page, limit);
  }

  /**
   * Supprime un mot
   * PHASE 7B - D√âL√âGATION: D√©l√©gation vers WordCoreService
   */
  async remove(id: string, user: User): Promise<{ success: boolean }> {
    console.log("üé≠ WordsService.remove - D√©l√©gation vers WordCoreService");
    return this.wordCoreService.remove(id, user);
  }

  /**
   * Recherche des mots avec filtres
   * PHASE 7B - D√âL√âGATION: D√©l√©gation vers WordCoreService
   */
  async search(searchDto: SearchWordsDto): Promise<{
    words: Word[];
    total: number;
    page: number;
    limit: number;
  }> {
    console.log("üé≠ WordsService.search - D√©l√©gation vers WordCoreService");
    return this.wordCoreService.search(searchDto);
  }

  /**
   * R√©cup√®re les mots vedettes
   * PHASE 7B - D√âL√âGATION: D√©l√©gation vers WordCoreService
   */
  async getFeaturedWords(limit = 3): Promise<Word[]> {
    console.log(
      "üé≠ WordsService.getFeaturedWords - D√©l√©gation vers WordCoreService"
    );
    return this.wordCoreService.getFeaturedWords(limit);
  }

  /**
   * R√©cup√®re les langues disponibles dans la base de donn√©es
   * PHASE 5 - D√âL√âGATION: D√©l√©gation vers WordCoreService
   */
  async getAvailableLanguages(): Promise<
    Array<{ language: string; count: number; languageId?: string }>
  > {
    console.log(
      "üé≠ WordsService.getAvailableLanguages - D√©l√©gation vers WordCoreService"
    );
    return this.wordCoreService.getAvailableLanguages();
  }

  // PHASE 3 - D√âL√âGATION: Ajouter un mot aux favoris
  async addToFavorites(
    wordId: string,
    userId: string
  ): Promise<{ success: boolean }> {
    console.log(
      "‚≠ê WordsService.addToFavorites - D√©l√©gation vers WordFavoriteService"
    );
    return this.wordFavoriteService.addToFavorites(wordId, userId);
  }

  // PHASE 3 - D√âL√âGATION: Retirer un mot des favoris
  async removeFromFavorites(
    wordId: string,
    userId: string
  ): Promise<{ success: boolean }> {
    console.log(
      "‚≠ê WordsService.removeFromFavorites - D√©l√©gation vers WordFavoriteService"
    );
    return this.wordFavoriteService.removeFromFavorites(wordId, userId);
  }

  // PHASE 3 - D√âL√âGATION: R√©cup√©rer les mots favoris d'un utilisateur
  async getFavoriteWords(
    userId: string,
    page = 1,
    limit = 10
  ): Promise<{
    words: Word[];
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  }> {
    console.log(
      "‚≠ê WordsService.getFavoriteWords - D√©l√©gation vers WordFavoriteService"
    );
    return this.wordFavoriteService.getFavoriteWords(userId, page, limit);
  }

  // PHASE 3 - D√âL√âGATION: V√©rifier si un mot est dans les favoris
  async checkIfFavorite(wordId: string, userId: string): Promise<boolean> {
    console.log(
      "‚≠ê WordsService.checkIfFavorite - D√©l√©gation vers WordFavoriteService"
    );
    return this.wordFavoriteService.checkIfFavorite(wordId, userId);
  }

  // PHASE 3 - D√âL√âGATION: Partager un mot avec un autre utilisateur
  async shareWordWithUser(
    wordId: string,
    fromUserId: string,
    toUsername: string
  ): Promise<{ success: boolean; message: string }> {
    console.log(
      "‚≠ê WordsService.shareWordWithUser - D√©l√©gation vers WordFavoriteService"
    );
    return this.wordFavoriteService.shareWordWithUser(
      wordId,
      fromUserId,
      toUsername
    );
  }

  /**
   * R√©cup√®re les mots en attente pour les admins
   * PHASE 5 - D√âL√âGATION: D√©l√©gation vers WordCoreService
   */
  async getAdminPendingWords(
    page = 1,
    limit = 10
  ): Promise<{
    words: Word[];
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  }> {
    console.log(
      "üé≠ WordsService.getAdminPendingWords - D√©l√©gation vers WordCoreService"
    );
    const result = await this.wordCoreService.findAll(page, limit, "pending");
    return {
      ...result,
      totalPages: Math.ceil(result.total / result.limit),
    };
  }

  /**
   * Met √† jour le statut d'un mot
   * PHASE 5 - D√âL√âGATION: D√©l√©gation vers WordCoreService
   */
  async updateWordStatus(
    id: string,
    status: "approved" | "rejected",
    adminId?: string
  ): Promise<Word> {
    console.log(
      "üé≠ WordsService.updateWordStatus - D√©l√©gation vers WordCoreService"
    );
    return this.wordCoreService.updateWordStatus(id, status, adminId || "system");
  }

  /**
   * Supprime un fichier audio pour un accent sp√©cifique
   */
  // PHASE 6A - D√âL√âGATION: Supprimer un fichier audio d'un mot
  async deleteAudioFile(
    wordId: string,
    accent: string,
    user: User
  ): Promise<Word> {
    console.log(
      "üéµ WordsService.deleteAudioFile - D√©l√©gation vers WordAudioService"
    );
    return this.wordAudioService.deleteAudioFile(wordId, accent, user);
  }

  // PHASE 6A - D√âL√âGATION: R√©cup√©rer tous les fichiers audio d'un mot
  async getWordAudioFiles(wordId: string): Promise<{
    wordId: string;
    word: string;
    language: string;
    audioFiles: Array<{
      accent: string;
      url: string;
      cloudinaryId: string;
      language: string;
    }>;
    totalCount: number;
  }> {
    console.log(
      "üéµ WordsService.getWordAudioFiles - D√©l√©gation vers WordAudioService"
    );
    return this.wordAudioService.getWordAudioFiles(wordId);
  }

  /**
   * Met √† jour en masse les fichiers audio d'un mot
   * PHASE 2 - √âTAPE 4 : D√©l√©gation vers WordAudioService
   */
  async bulkUpdateAudioFiles(
    wordId: string,
    audioUpdates: Array<{
      accent: string;
      audioBuffer: Buffer;
      replaceExisting?: boolean;
    }>,
    user: User
  ): Promise<Word> {
    // Adapter les donn√©es vers le format WordAudioService
    const adaptedUpdates = audioUpdates.map((update) => ({
      accent: update.accent,
      fileBuffer: update.audioBuffer,
      action: update.replaceExisting ? ("update" as const) : ("add" as const),
    }));

    console.log(
      "üéµ WordsService.bulkUpdateAudioFiles - D√©l√©gation vers WordAudioService"
    );
    return this.wordAudioService.bulkUpdateAudioFiles(
      wordId,
      adaptedUpdates,
      user
    );
  }

  /**
   * G√©n√®re une URL optimis√©e pour un fichier audio
   * PHASE 2 - √âTAPE 4 : D√©l√©gation vers WordAudioService
   */
  async getOptimizedAudioUrl(
    wordId: string,
    accent: string,
    options: {
      quality?: "auto:low" | "auto:good" | "auto:best";
      format?: "mp3" | "ogg" | "wav";
      volume?: number;
      speed?: number;
    } = {}
  ): Promise<string> {
    // Adapter les options vers le format WordAudioService
    const adaptedOptions = {
      quality:
        (options.quality?.replace("auto:", "") as "auto" | "good" | "best") ||
        "auto",
      format: options.format || "mp3",
    };

    console.log(
      "üéµ WordsService.getOptimizedAudioUrl - D√©l√©gation vers WordAudioService"
    );
    const result = await this.wordAudioService.getOptimizedAudioUrl(
      wordId,
      accent,
      adaptedOptions
    );
    return result.optimizedUrl;
  }

  /**
   * V√©rifie la validit√© des fichiers audio d'un mot
   * PHASE 2 - √âTAPE 4 : D√©l√©gation vers WordAudioService
   */
  async validateWordAudioFiles(wordId: string): Promise<{
    valid: boolean;
    issues: string[];
    audioFiles: Array<{
      accent: string;
      status: "valid" | "invalid" | "missing";
      error?: string;
    }>;
  }> {
    console.log(
      "üéµ WordsService.validateWordAudioFiles - D√©l√©gation vers WordAudioService"
    );
    const result = await this.wordAudioService.validateWordAudioFiles(wordId);

    // Adapter la r√©ponse vers le format attendu par WordsService
    const audioFiles: Array<{
      accent: string;
      status: "valid" | "invalid" | "missing";
      error?: string;
    }> = [];

    // Ajouter les fichiers invalides
    result.invalidFiles.forEach((invalid) => {
      audioFiles.push({
        accent: invalid.accent,
        status: "invalid",
        error: invalid.issues.join(", "),
      });
    });

    // Ajouter les fichiers valides
    const totalFiles = result.totalFiles;
    const invalidCount = result.invalidFiles.length;
    const validCount = totalFiles - invalidCount;

    for (let i = 0; i < validCount; i++) {
      audioFiles.push({
        accent: `valid-${i}`, // Placeholder car WordAudioService ne retourne pas les d√©tails des valides
        status: "valid",
      });
    }

    return {
      valid: result.invalidFiles.length === 0,
      issues: result.recommendations,
      audioFiles,
    };
  }

  /**
   * Nettoie les fichiers audio orphelins (qui n'existent plus sur Cloudinary)
   */
  // PHASE 2 - D√âL√âGATION: Nettoyage des fichiers audio orphelins
  async cleanupOrphanedAudioFiles(wordId?: string): Promise<{
    cleaned: number;
    errors: string[];
  }> {
    return this.wordAudioService.cleanupOrphanedAudioFiles(wordId);
  }

  // PHASE 2 - D√âL√âGATION: Statistiques des fichiers audio
  async getAudioStatistics(): Promise<{
    totalWords: number;
    wordsWithAudio: number;
    totalAudioFiles: number;
    audioByLanguage: Record<string, number>;
    audioByAccent: Record<string, number>;
    averageAudioPerWord: number;
  }> {
    return this.wordAudioService.getAudioStatistics();
  }

  /**
   * R√©cup√®re toutes les traductions d'un mot (directes + inverses)
   * PHASE 6B - D√âL√âGATION: D√©l√©gation vers WordTranslationService
   */
  async getAllTranslations(wordId: string): Promise<{
    directTranslations: any[];
    reverseTranslations: any[];
    allTranslations: any[];
  }> {
    console.log(
      "üîç WordsService.getAllTranslations - D√©l√©gation vers WordTranslationService"
    );
    return this.wordTranslationService.getAllTranslations(wordId);
  }

  // PHASE 4 - D√âL√âGATION: Nombre de mots approuv√©s
  async getApprovedWordsCount(): Promise<number> {
    console.log(
      "üìä WordsService.getApprovedWordsCount - D√©l√©gation vers WordAnalyticsService"
    );
    return this.wordAnalyticsService.getApprovedWordsCount();
  }

  // PHASE 4 - D√âL√âGATION: Mots ajout√©s aujourd'hui
  async getWordsAddedToday(): Promise<number> {
    console.log(
      "üìä WordsService.getWordsAddedToday - D√©l√©gation vers WordAnalyticsService"
    );
    return this.wordAnalyticsService.getWordsAddedToday();
  }

  // PHASE 4 - D√âL√âGATION: R√©cup√©rer les statistiques compl√®tes des mots
  async getWordsStatistics(): Promise<{
    totalApprovedWords: number;
    wordsAddedToday: number;
    wordsAddedThisWeek: number;
    wordsAddedThisMonth: number;
  }> {
    console.log(
      "üìä WordsService.getWordsStatistics - D√©l√©gation vers WordAnalyticsService"
    );
    return this.wordAnalyticsService.getWordsStatistics();
  }
}
