/**
 * @fileoverview Service de gestion des cat√©gories du dictionnaire O'Ypunu
 *
 * Ce service g√®re les op√©rations CRUD sur les cat√©gories de mots
 * avec organisation hi√©rarchique, validation d'unicit√© et int√©gration
 * avec le pattern Repository pour abstraction des donn√©es.
 *
 * @author √âquipe O'Ypunu
 * @version 1.0.0
 * @since 2025-01-01
 */

import {
  Injectable,
  NotFoundException,
  BadRequestException,
  Inject,
} from "@nestjs/common";
import { Types } from "mongoose";
import { Category } from "../schemas/category.schema";
import { CreateCategoryDto } from "../dto/create-category.dto";
import { UpdateCategoryDto } from "../dto/update-category.dto";
import {
  ProposeCategoryDto,
  ModerateCategoryDto,
} from "../dto/propose-category.dto";
import { ICategoryRepository } from "../../repositories/interfaces/category.repository.interface";
import { ILanguageRepository } from "../../repositories/interfaces/language.repository.interface";
import { User } from "../../users/schemas/user.schema";

/**
 * Service de gestion des cat√©gories du dictionnaire O'Ypunu
 *
 * G√®re l'organisation hi√©rarchique des mots par cat√©gories avec
 * validation d'unicit√©, op√©rations CRUD compl√®tes et recherche
 * optimis√©e via le pattern Repository.
 *
 * ## Fonctionnalit√©s principales :
 * - Cr√©ation de cat√©gories avec validation d'unicit√©
 * - Organisation hi√©rarchique parent/enfant
 * - Recherche et filtrage de cat√©gories
 * - Mise √† jour et suppression avec contr√¥les
 * - Comptage des mots par cat√©gorie
 *
 * @class CategoriesService
 * @version 1.0.0
 */
@Injectable()
export class CategoriesService {
  constructor(
    @Inject("ICategoryRepository")
    private categoryRepository: ICategoryRepository,
    @Inject("ILanguageRepository")
    private languageRepository: ILanguageRepository
  ) {}

  async create(createCategoryDto: CreateCategoryDto): Promise<Category> {
    // V√©rifier si la cat√©gorie existe d√©j√† dans la m√™me langue
    const existsAlready = await this.categoryRepository.existsByName(
      createCategoryDto.name
    );

    if (existsAlready) {
      throw new BadRequestException(
        `La cat√©gorie "${createCategoryDto.name}" existe d√©j√†`
      );
    }

    // Cr√©er la nouvelle cat√©gorie
    return this.categoryRepository.create(createCategoryDto, "system");
  }

  async findAll(language?: string): Promise<Category[]> {
    console.log("üîç CategoriesService.findAll appel√© avec language:", language);

    const result = await this.categoryRepository.findAll({
      includeInactive: false,
      sortBy: "name",
      sortOrder: "asc",
    });

    console.log(
      "üì¶ Nombre total de cat√©gories trouv√©es:",
      result.categories.length
    );
    console.log(
      "üì¶ Cat√©gories brutes:",
      result.categories.map((cat) => ({
        id: (cat as any)._id,
        name: cat.name,
        language: (cat as any).language,
        languageId: (cat as any).languageId,
      }))
    );

    if (language) {
      // Filtrer par langue si sp√©cifi√©e
      // Support √† la fois pour 'language' (code) et 'languageId' (ObjectId)

      // Essayer de trouver la langue par son code pour obtenir son ObjectId
      let languageObjectId: string | null = null;

      // Cas 1: Si c'est d√©j√† un ObjectId valide, l'utiliser directement
      if (Types.ObjectId.isValid(language)) {
        languageObjectId = language;
        console.log("‚úÖ Utilisation directe de l'ObjectId:", languageObjectId);
      } else {
        // Cas 2: Essayer de trouver la langue par son code
        try {
          const languageEntity =
            await this.languageRepository.findByCode(language);
          if (languageEntity) {
            languageObjectId = (languageEntity as any)._id?.toString();
            console.log("üîç Langue trouv√©e:", {
              code: language,
              id: languageObjectId,
              name: (languageEntity as any).name,
            });
          } else {
            console.warn("‚ö†Ô∏è Aucune langue trouv√©e avec le code:", language);
          }
        } catch (error) {
          console.warn(
            `‚ùå Erreur lors de la recherche de langue avec le code: ${language}`,
            error
          );
        }
      }

      const filteredCategories = result.categories.filter((cat: any) => {
        // V√©rifie d'abord le champ 'language' (pour compatibilit√© avec les anciennes cat√©gories)
        if (cat.language === language) {
          console.log("‚úÖ Cat√©gorie match√©e par champ language:", cat.name);
          return true;
        }

        // Si on a trouv√© l'ObjectId de la langue, comparer avec languageId
        if (cat.languageId && languageObjectId) {
          const match = cat.languageId.toString() === languageObjectId;
          if (match) {
            console.log("‚úÖ Cat√©gorie match√©e par languageId:", cat.name);
          }
          return match;
        }

        return false;
      });

      console.log(
        "üì¶ Cat√©gories filtr√©es pour",
        language + ":",
        filteredCategories.length
      );
      return filteredCategories;
    }

    return result.categories;
  }

  async findOne(id: string): Promise<Category> {
    if (!Types.ObjectId.isValid(id)) {
      throw new BadRequestException("ID de cat√©gorie invalide");
    }

    const category = await this.categoryRepository.findById(id);

    if (!category) {
      throw new NotFoundException(`Cat√©gorie avec l'ID ${id} non trouv√©e`);
    }

    return category;
  }

  async update(
    id: string,
    updateCategoryDto: UpdateCategoryDto
  ): Promise<Category> {
    if (!Types.ObjectId.isValid(id)) {
      throw new BadRequestException("ID de cat√©gorie invalide");
    }

    // V√©rifier si la cat√©gorie existe
    const category = await this.categoryRepository.findById(id);
    if (!category) {
      throw new NotFoundException(`Cat√©gorie avec l'ID ${id} non trouv√©e`);
    }

    // Mettre √† jour la cat√©gorie
    const updatedCategory = await this.categoryRepository.update(
      id,
      updateCategoryDto
    );

    if (!updatedCategory) {
      throw new NotFoundException(`Cat√©gorie avec l'ID ${id} non trouv√©e`);
    }

    return updatedCategory;
  }

  async remove(id: string): Promise<{ success: boolean }> {
    if (!Types.ObjectId.isValid(id)) {
      throw new BadRequestException("ID de cat√©gorie invalide");
    }

    // V√©rifier si la cat√©gorie existe
    const category = await this.categoryRepository.findById(id);
    if (!category) {
      throw new NotFoundException(`Cat√©gorie avec l'ID ${id} non trouv√©e`);
    }

    // Supprimer la cat√©gorie
    const deleted = await this.categoryRepository.delete(id);

    return { success: deleted };
  }

  // ===== M√âTHODES POUR LE WORKFLOW D'APPROBATION =====

  async proposeCategory(
    proposeCategoryDto: ProposeCategoryDto,
    user: User
  ): Promise<Category> {
    try {
      console.log("üì• Proposition de cat√©gorie re√ßue:", proposeCategoryDto);
      console.log("üë§ Utilisateur:", user);

      // Validation des donn√©es
      if (!proposeCategoryDto.name || proposeCategoryDto.name.trim() === "") {
        throw new BadRequestException("Le nom de la cat√©gorie est requis");
      }

      // V√©rifier qu'au moins languageId ou language est fourni
      if (!proposeCategoryDto.languageId && !proposeCategoryDto.language) {
        throw new BadRequestException(
          "La langue est requise (languageId ou language)"
        );
      }

      // V√©rifier si une cat√©gorie similaire existe d√©j√†
      const existingCategory =
        await this.categoryRepository.findByNameAndLanguage(
          proposeCategoryDto.name.trim(),
          proposeCategoryDto.languageId || proposeCategoryDto.language
        );

      if (existingCategory) {
        throw new BadRequestException(
          `Une cat√©gorie avec le nom "${proposeCategoryDto.name}" existe d√©j√† pour cette langue`
        );
      }

      // Cr√©er la cat√©gorie avec statut "pending"
      const categoryData = {
        name: proposeCategoryDto.name.trim(),
        description: proposeCategoryDto.description?.trim(),
        languageId: proposeCategoryDto.languageId,
        language: proposeCategoryDto.language,
        systemStatus: "pending",
        proposedBy: (user as any)._id,
        isActive: false, // Inactive jusqu'√† approbation
      };

      const category =
        await this.categoryRepository.createWithProposal(categoryData);

      console.log("‚úÖ Cat√©gorie propos√©e avec succ√®s:", {
        id: (category as any)._id,
        name: category.name,
        systemStatus: category.systemStatus,
      });

      return category;
    } catch (error) {
      console.error("‚ùå Erreur lors de la proposition de cat√©gorie:", error);
      throw error;
    }
  }

  async getPendingCategories(user: User): Promise<Category[]> {
    try {
      console.log("üìã R√©cup√©ration des cat√©gories en attente par:", user);

      // V√©rifier que l'utilisateur a les permissions admin
      if (!["admin", "superadmin"].includes(user.role)) {
        throw new BadRequestException("Permissions insuffisantes");
      }

      const pendingCategories =
        await this.categoryRepository.findByStatus("pending");

      console.log(
        `‚úÖ ${pendingCategories.length} cat√©gories en attente r√©cup√©r√©es`
      );

      return pendingCategories;
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de la r√©cup√©ration des cat√©gories en attente:",
        error
      );
      throw error;
    }
  }

  async moderateCategory(
    categoryId: string,
    moderateDto: ModerateCategoryDto,
    moderator: User
  ): Promise<Category> {
    try {
      console.log("üîç Mod√©ration de cat√©gorie:", {
        categoryId,
        action: moderateDto.action,
      });

      if (!Types.ObjectId.isValid(categoryId)) {
        throw new BadRequestException("ID de cat√©gorie invalide");
      }

      // V√©rifier que l'utilisateur a les permissions admin
      if (!["admin", "superadmin"].includes(moderator.role)) {
        throw new BadRequestException("Permissions insuffisantes");
      }

      // R√©cup√©rer la cat√©gorie
      const category = await this.categoryRepository.findById(categoryId);
      if (!category) {
        throw new NotFoundException(
          `Cat√©gorie avec l'ID ${categoryId} non trouv√©e`
        );
      }

      // V√©rifier que la cat√©gorie est en attente
      if (category.systemStatus !== "pending") {
        throw new BadRequestException(
          `La cat√©gorie n'est pas en attente de mod√©ration (statut: ${category.systemStatus})`
        );
      }

      // Appliquer la mod√©ration
      const updateData: any = {
        systemStatus: moderateDto.action === "approve" ? "active" : "rejected",
        moderatedBy: (moderator as any)._id,
        moderatedAt: new Date(),
        moderationNotes: moderateDto.moderationNotes,
      };

      // Si approuv√©e, activer la cat√©gorie
      if (moderateDto.action === "approve") {
        updateData.isActive = true;
      }

      const updatedCategory = await this.categoryRepository.update(
        categoryId,
        updateData
      );

      if (!updatedCategory) {
        throw new NotFoundException(
          `Cat√©gorie avec l'ID ${categoryId} non trouv√©e`
        );
      }

      console.log("‚úÖ Cat√©gorie mod√©r√©e avec succ√®s:", {
        id: (updatedCategory as any)._id,
        name: updatedCategory.name,
        systemStatus: updatedCategory.systemStatus,
        action: moderateDto.action,
      });

      return updatedCategory;
    } catch (error) {
      console.error("‚ùå Erreur lors de la mod√©ration de cat√©gorie:", error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer les statistiques des cat√©gories
   */
  async getCategoryStats(): Promise<any> {
    try {
      console.log("üìä R√©cup√©ration des statistiques des cat√©gories");

      // Compter les cat√©gories par statut
      const [totalActive, totalPending] = await Promise.all([
        this.categoryRepository.findByStatus("active"),
        this.categoryRepository.findByStatus("pending"),
      ]);

      const stats = {
        totalActive: totalActive.length,
        totalPending: totalPending.length,
        byStatus: [
          { status: "active", count: totalActive.length },
          { status: "pending", count: totalPending.length },
        ],
      };

      console.log("‚úÖ Statistiques des cat√©gories r√©cup√©r√©es:", stats);

      return stats;
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de la r√©cup√©ration des statistiques des cat√©gories:",
        error
      );
      throw error;
    }
  }
}
