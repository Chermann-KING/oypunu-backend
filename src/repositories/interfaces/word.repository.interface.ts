import { Types } from 'mongoose';
import { Word } from '../../dictionary/schemas/word.schema';
import { CreateWordDto } from '../../dictionary/dto/create-word.dto';
import { UpdateWordDto } from '../../dictionary/dto/update-word.dto';
import { SearchWordsDto } from '../../dictionary/dto/search-words.dto';

/**
 * üìö INTERFACE WORD REPOSITORY
 * 
 * Contrat abstrait pour l'acc√®s aux donn√©es des mots.
 * D√©couple compl√®tement les services de la couche de persistance.
 * 
 * Avantages :
 * ‚úÖ Testabilit√© : Mock facile pour les tests unitaires
 * ‚úÖ Flexibilit√© : Changer de DB sans impact sur les services
 * ‚úÖ S√©paration responsabilit√©s : Services = logique m√©tier, Repository = acc√®s donn√©es
 * ‚úÖ √âvolutivit√© : Ajouter cache, multi-DB, etc. sans casser les services
 */
export interface IWordRepository {
  // ========== CRUD DE BASE ==========
  
  /**
   * Cr√©er un nouveau mot
   */
  create(wordData: CreateWordDto, userId: string, status?: string): Promise<Word>;
  
  /**
   * R√©cup√©rer un mot par ID
   */
  findById(id: string): Promise<Word | null>;
  
  /**
   * R√©cup√©rer tous les mots avec pagination
   */
  findAll(options: {
    page?: number;
    limit?: number;
    status?: string;
    language?: string;
    categoryId?: string;
  }): Promise<{
    words: Word[];
    total: number;
    page: number;
    limit: number;
  }>;
  
  /**
   * Mettre √† jour un mot
   */
  update(id: string, updateData: UpdateWordDto): Promise<Word | null>;
  
  /**
   * Supprimer un mot
   */
  delete(id: string): Promise<boolean>;
  
  // ========== RECHERCHE AVANC√âE ==========
  
  /**
   * Rechercher des mots avec filtres complexes
   */
  search(searchParams: SearchWordsDto): Promise<{
    words: Word[];
    total: number;
    page: number;
    limit: number;
  }>;
  
  /**
   * V√©rifier si un mot existe d√©j√†
   */
  existsByWordAndLanguage(word: string, language: string, languageId?: string): Promise<boolean>;
  
  /**
   * R√©cup√©rer mots par statut
   */
  findByStatus(status: string, options?: { limit?: number; offset?: number }): Promise<Word[]>;
  
  /**
   * R√©cup√©rer mots vedettes
   */
  findFeatured(limit?: number): Promise<Word[]>;
  
  // ========== STATISTIQUES ==========
  
  /**
   * Compter mots par statut
   */
  countByStatus(status: string): Promise<number>;
  
  /**
   * Compter mots ajout√©s aujourd'hui
   */
  countAddedToday(): Promise<number>;
  
  /**
   * Langues disponibles avec compteurs
   */
  getAvailableLanguages(): Promise<Array<{ 
    language: string; 
    count: number; 
    languageId?: string 
  }>>;
  
  /**
   * Statistiques g√©n√©rales des mots
   */
  getWordsStatistics(): Promise<{
    totalWords: number;
    approvedWords: number;
    pendingWords: number;
    rejectedWords: number;
    wordsByLanguage: Array<{ language: string; count: number }>;
  }>;
  
  // ========== RELATIONS ==========
  
  /**
   * R√©cup√©rer mots d'un utilisateur
   */
  findByUserId(userId: string, options?: { 
    status?: string; 
    limit?: number; 
    offset?: number 
  }): Promise<Word[]>;
  
  /**
   * R√©cup√©rer mots d'une cat√©gorie
   */
  findByCategoryId(categoryId: string, options?: { 
    limit?: number; 
    offset?: number 
  }): Promise<Word[]>;
  
  /**
   * Mettre √† jour le statut d'un mot
   */
  updateStatus(id: string, status: string, adminId?: string): Promise<Word | null>;
  
  /**
   * Incr√©menter le compteur de vues
   */
  incrementViewCount(id: string): Promise<void>;
  
  /**
   * Mettre √† jour le compteur de traductions
   */
  updateTranslationCount(id: string, count: number): Promise<void>;
  
  // ========== OP√âRATIONS EN MASSE ==========
  
  /**
   * Supprimer plusieurs mots par IDs
   */
  deleteMany(ids: string[]): Promise<number>;
  
  /**
   * Mettre √† jour le statut de plusieurs mots
   */
  updateManyStatus(ids: string[], status: string, adminId?: string): Promise<number>;
  
  /**
   * Recherche textuelle full-text
   */
  searchByText(query: string, options?: {
    languages?: string[];
    limit?: number;
    offset?: number;
  }): Promise<Word[]>;

  // ========== M√âTHODES POUR USERSSERVICE ==========

  /**
   * Compter les mots cr√©√©s par un utilisateur avec un statut donn√©
   */
  countByCreatorAndStatus(userId: string, status: string): Promise<number>;

  /**
   * R√©cup√©rer mots cr√©√©s par un utilisateur avec options
   */
  findByCreator(userId: string, options?: {
    status?: string;
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
    limit?: number;
    offset?: number;
  }): Promise<Word[]>;

  /**
   * Obtenir les langues distinctes pour un cr√©ateur
   */
  getDistinctLanguagesByCreator(userId: string): Promise<string[]>;
}